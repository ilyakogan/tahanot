{"version":3,"file":"mapAll.js","sources":["mapMain.js","utils/distance.js","eventServices/mapCenterChanged.js","eventServices/newStopsDisplayed.js","nativeApp/nativeAppCallbacks/setInitialLocation.js","map.js","parseClient.js","stopCache.js","eventServices/mapStopClicked.js","mapStops.js","geolocationTracker.js","eventServices/addressEntered.js","searchBar.js","mapPageScroller.js","angular/tahanotApp.js","nativeApp/bridge.js","nativeApp/nativeAppCallbacks/onMonitoringInfoArrived.js","stopMonitoringCache.js","nativeApp/nativeAppCallbacks/setIsForWidget.js","angular/nearbyStopsController.js"],"names":["visualTouches","$","document","ready","height","window","width","navBarHeight","outerHeight","css","click","scrollPos","jQuery","find","this","attr","offset","top","animate","scrollTop","scrollspy","target","define","location1","location2","x","lat","y","lng","Math","sqrt","map","distance","centerBefore","callbacks","Callbacks","activeTimerId","broadcastDelayed","getCenter","clearTimeout","setTimeout","dist","fire","broadcastNow","listen","callback","add","broadcast","setInitialLocation","lon","mapCenterChanged","newStopsDisplayed","initialize","initialLocation","google","maps","LatLng","Map","getElementById","center","streetViewControl","panControl","zoomControlOptions","style","ZoomControlStyle","SMALL","position","ControlPosition","RIGHT_BOTTOM","mapTypeControlOptions","mapTypeIds","MapTypeId","ROADMAP","SATELLITE","zoom","registerMapEvents","navigator","geolocation","getCurrentPosition","pos","coords","initMapCenter","latitude","longitude","setCenter","event","addListener","addIdleListenerOnce","addListenerOnce","panTo","location","googleMap","extractStop","obj","code","get","name","town","getNearbyStops","point","Parse","GeoPoint","query","Query","Object","extend","near","limit","then","objs","getStopByCode","stopCode","equalTo","first","parseClient","exists","stop","undefined","stops","byDistanceFrom","centerGeoPoint","stop1","stop2","distance1","kilometersTo","distance2","getStopsAround","centerLat","centerLng","maxDisatnceKm","nearbyStops","push","sort","addStopsAround","newStopCallback","forEach","getOrAdd","d","Deferred","resolve","promise","stopCache","mapStopClicked","searchForStops","newStop","createStopMarker","stopMarker","Marker","title","icon","image","url","size","Size","origin","Point","anchor","createLocationMarker","clickable","MarkerImage","shadow","zIndex","trackLocation","me","locationMarker","setPosition","addressEntered","initSearchBar","autocomplete","places","Autocomplete","types","onAddressEntered","blurControls","select","getLocation","address","geocoder","geocode","results","status","GeocoderStatus","OK","geometry","reject","value","done","activeElement","blur","parentElement","focus","Geocoder","scrollTo","selector","completeCallback","showOnMap","app","angular","module","config","$locationProvider","html5Mode","enabled","requireBase","onStopsDisplayed","wasStopDisplayedSent","AndroidBridge","onFirstStopDisplayed","console","log","onStopSelected","stopName","requestStopMonitoring","visit","line","ExpectedArrivalTime","PublishedLineName","DestinationRef","onMonitoringInfoArrived","Stops","MotiroringRef","StopVisits","Array","apply","_","ResponseTimestamp","initVisitsMap","stopCodes","visitsByStopCode","addVisits","monitoringInfo","monitoringStop","visits","minutesToArrival","minutesBetween","parseDate","lineNumber","destinationRef","parseInt","isAlreadyHere","fireCallbacks","msAjaxDate","Date","replace","olderDate","newerDate","floor","bridge","Stop","thisStop","ageOfData","lastRequestSent","deferreds","updateVisits","deferred","force","giveUpAfter","getOrAddStop","isRecent","getStop","i","length","time","cacheTimeout","setIsForWidget","isForWidget","require","tahanotApp","stopMonitoringCache","mapPageScroller","controller","$scope","refresh","regularStops","selectedStopCode","selectedStop","addStopModel","createStopModel","slice","isSelected","visitsAvailable","stopModel","getVisits","isReceivingVisits","failedReceivingVisits","callInScope","indexOf","destinationStop","destination","$apply","f","$$phase","selectForWidget","refreshVisits","element","bootstrap","show"],"mappings":"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","sourcesContent":["require([\"mapStops\"]);\r\nrequire([\"geolocationTracker\"]);\r\nrequire([\"searchBar\"]);\r\nrequire([\"mapPageScroller\"]);\r\nrequire([\"angular/nearbyStopsController\"]);\r\nrequire([\"nativeApp/nativeAppCallbacks/onMonitoringInfoArrived\"])\r\nrequire([\"nativeApp/nativeAppCallbacks/setInitialLocation\"])\r\nrequire([\"nativeApp/nativeAppCallbacks/setIsForWidget\"])\r\n\r\n\r\nfunction visualTouches() {\r\n\t// Set sections heights so they're prepared for navigation\r\n\t$(document).ready(function(){\r\n\t\t$(\"#map-section\").height($(window).height()).width(\"100%\");\r\n\t\t$(\"#hello-section\").height($(window).height()).width(\"100%\");\r\n\t\tvar navBarHeight = $(\"#navbar-main\").outerHeight();\r\n\t\t$(\".page-section\").css(\"padding-top\", navBarHeight);\r\n\t});\r\n\r\n\t// Make scrolling smooth\r\n\t$('.pagination a').click(function (event) {\r\n\t\tvar scrollPos = jQuery('body').find($(this).attr('href')).offset().top;\r\n\t\t$('body,html').animate({ scrollTop: scrollPos}, 500, function () {});\r\n\t\treturn false;\r\n\t});\r\n\r\n\t$('body').scrollspy({ target: '#navbar-main' })\r\n}\r\n\r\nParse.initialize(\"Yyxpr1XarbQvtfHNYWKHUGlFdKDjWttPKLYgMXBe\", \"xscYP2yXXd0udn26sXIhaCCIEW28pN2Ux2th2IJS\");\r\n\r\nvisualTouches();\r\n\r\n\ndefine(\"mapMain\", function(){});\n\n","define(\"utils/distance\", [],function() {\r\n    return function(location1, location2)\r\n    {\r\n      var x = location1.lat() - location2.lat();\r\n      var y = location1.lng() - location2.lng();\r\n      return Math.sqrt(x*x + y*y);\r\n    }\r\n});\n","define('eventServices/mapCenterChanged',[\"map\", \"utils/distance\"], function(map, distance) {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n    var centerBefore;\r\n    var activeTimerId = null;\r\n\r\n    return {\r\n\t\tbroadcastDelayed: function(getCenter) {\r\n            if (activeTimerId) {\r\n                clearTimeout(activeTimerId);\r\n            }\r\n            centerBefore = getCenter();\r\n            activeTimerId = setTimeout(function() {\r\n                activeTimerId = null;\r\n                var dist = distance(centerBefore, getCenter());\r\n                if (dist > 0.001) {\r\n                    // Map is still moving\r\n                    return;\r\n                }\r\n                callbacks.fire();\r\n            }, 1000);\r\n        },\r\n\r\n        broadcastNow: function() {\r\n            callbacks.fire(); \r\n        },\r\n\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define(\"eventServices/newStopsDisplayed\", [],function() {\r\n    var callbacks = $.Callbacks();\r\n\r\n    return {\r\n        broadcast: function() { callbacks.fire(); },\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    };\r\n});\n","define('nativeApp/nativeAppCallbacks/setInitialLocation',[],function() {\r\n    var callbacks = $.Callbacks();\r\n    \r\n    window.setInitialLocation = function(lat, lon) {\r\n        callbacks.fire(lat, lon);\r\n    };\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","define('map',[\"eventServices/mapCenterChanged\", \"eventServices/newStopsDisplayed\", \"nativeApp/nativeAppCallbacks/setInitialLocation\"], \r\n    function(mapCenterChanged, newStopsDisplayed, setInitialLocation) {\r\n\r\n    var map;\r\n    var mapMover;\r\n\r\n    function initialize() {\r\n        var lat = 32.08;\r\n        var lng = 34.781;\r\n        var initialLocation = new google.maps.LatLng(lat, lng);\r\n        map = new google.maps.Map(document.getElementById('map-canvas'), {\r\n            center: initialLocation,\r\n            streetViewControl: false,\r\n            panControl: false,\r\n            zoomControlOptions: {\r\n                style: google.maps.ZoomControlStyle.SMALL,\r\n                position: google.maps.ControlPosition.RIGHT_BOTTOM\r\n            },\r\n            mapTypeControlOptions: {\r\n                mapTypeIds: [\r\n                    google.maps.MapTypeId.ROADMAP,\r\n                    google.maps.MapTypeId.SATELLITE\r\n                ]\r\n            },\r\n            zoom: 17\r\n        });\r\n\r\n        registerMapEvents();\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(function(pos) { \r\n                if (pos && pos.coords) {\r\n                    initMapCenter(pos.coords.latitude, pos.coords.longitude);\r\n                }\r\n            })\r\n        }\r\n        \r\n        setInitialLocation.listen(initMapCenter)\r\n    }\r\n\r\n    function initMapCenter(lat, lng) {\r\n        map.setCenter(new google.maps.LatLng(lat, lng));\r\n        mapCenterChanged.broadcastNow();\r\n    }\r\n\r\n    function getCenter() {\r\n        return map.getCenter();\r\n    }\r\n\r\n    function registerMapEvents() {\r\n        google.maps.event.addListener(map, 'idle', function() {\r\n            mapCenterChanged.broadcastDelayed(getCenter);\r\n        });\r\n    }\r\n\r\n    function addIdleListenerOnce(callback) { \r\n        google.maps.event.addListenerOnce(map, 'idle', function() {\r\n            callback();\r\n        }); \r\n    }\r\n\r\n    initialize();\r\n\r\n    return {\r\n        panTo: function(location) { map.panTo(location); },\r\n        getCenter: getCenter,\r\n        addIdleListenerOnce: addIdleListenerOnce,\r\n        googleMap: map\r\n    };\r\n});\n","define('parseClient',[],function() {\r\n    function extractStop(obj) {\r\n        return {\r\n            code: obj.get(\"code\"),\r\n            name: obj.get(\"name\"),\r\n            town: obj.get(\"town\"),\r\n            location: obj.get(\"location\")\r\n        };\r\n    }\r\n\r\n    return {\r\n        getNearbyStops: function(lat, lng) {\r\n            var point = new Parse.GeoPoint(lat, lng);\r\n            var query = new Parse.Query(Parse.Object.extend(\"stop\"));\r\n            query.near(\"location\", point);\r\n            query.limit(10);\r\n            return query.find().then(function(objs) {\r\n                return $.map(objs, extractStop);\r\n            });\r\n        },\r\n\r\n        // getStopCode: function(place) {\r\n        //     lat = Math.round(place.geometry.location.lat() * 1000000) / 1000000;\r\n        //     lng = Math.round(place.geometry.location.lng() * 1000000) / 1000000;\r\n            \r\n        //     var query = new Parse.Query(Parse.Object.extend(\"stops\"));\r\n        //     query.equalTo(\"lat\", lat);\r\n        //     query.equalTo(\"lon\", lng);\r\n        //     query.select(\"code\");\r\n        //     return query.first().then(function(stop) {\r\n        //         place.stopCode = stop.get(\"code\");\r\n        //         return Parse.Promise.as(place);\r\n        //     });\r\n        // },\r\n\r\n        getStopByCode: function(stopCode) {\r\n            var query = new Parse.Query(Parse.Object.extend(\"stop\"));\r\n            query.equalTo(\"code\", stopCode);\r\n            return query.first().then(extractStop);\r\n        }\r\n    }\r\n});\n","define('stopCache',[\"parseClient\"], function(parseClient) {\r\n\tvar stops = {};\r\n    \t\t\r\n\tfunction exists(stop) {\r\n        return stops[stop.code] !== undefined;\r\n\t}\r\n\r\n    function byDistanceFrom(centerGeoPoint) {\r\n    \treturn function(stop1, stop2) {\r\n\t        distance1 = stop1.location.kilometersTo(centerGeoPoint);\r\n\t        distance2 = stop2.location.kilometersTo(centerGeoPoint);\r\n\t        return distance1 - distance2;\r\n\t    };\r\n    }\r\n\r\n    function getStopsAround(centerLat, centerLng, maxDisatnceKm) {\r\n        var centerGeoPoint = new Parse.GeoPoint(centerLat, centerLng);\r\n        var nearbyStops = []\r\n        for (var stopCode in stops) {\r\n            if (stops[stopCode].location.kilometersTo(centerGeoPoint) < maxDisatnceKm) {\r\n                nearbyStops.push(stops[stopCode])\r\n            }\r\n        }\r\n    \tnearbyStops.sort(byDistanceFrom(centerGeoPoint));\r\n        return nearbyStops;\r\n    }\r\n\r\n    function addStopsAround(centerLat, centerLng, newStopCallback) {\r\n        parseClient.getNearbyStops(centerLat, centerLng).then(function(nearbyStops) {\r\n            nearbyStops.forEach(function(stop) {\r\n                if (!exists(stop)) {\r\n                    stops[stop.code] = stop;\r\n                    newStopCallback(stop);\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    function getOrAdd(stopCode) {\r\n        var d = $.Deferred();\r\n        var stop = stops[stopCode];\r\n        if (stop) {\r\n            d.resolve(stop);\r\n        }\r\n        else {\r\n            parseClient.getStopByCode(stopCode).then(function(stop) {\r\n                stops[stop.code] = stop;\r\n                d.resolve(stop);\r\n            })\r\n        }\r\n        return d.promise();\r\n    }\r\n\r\n\treturn {\r\n\t\tgetStopsAround: getStopsAround,\r\n        addStopsAround: addStopsAround,\r\n        getOrAdd: getOrAdd,\r\n        get: function(stopCode) {\r\n            return stops[stopCode];\r\n        }\r\n\t};\r\n});\r\n    \n","define(\"eventServices/mapStopClicked\", [],function() {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n\treturn {\r\n\t\tbroadcast: function(stop) { callbacks.fire(stop); },\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define('mapStops',[\"map\", \"stopCache\", \"eventServices/mapCenterChanged\", \"eventServices/mapStopClicked\", \"eventServices/newStopsDisplayed\", \"utils/distance\"], \r\nfunction(map, stopCache, mapCenterChanged, mapStopClicked, newStopsDisplayed, distance) {\r\n\r\n    function searchForStops() {\r\n        stopCache.addStopsAround(\r\n            map.getCenter().lat(), \r\n            map.getCenter().lng(), \r\n            function(newStop) {\r\n                createStopMarker(newStop);\r\n                newStopsDisplayed.broadcast();\r\n            });\r\n    }\r\n\r\n    var image = {\r\n        url: 'images/bus_marker.png',\r\n        size: new google.maps.Size(33, 61),\r\n        origin: new google.maps.Point(0, 0),\r\n        anchor: new google.maps.Point(16, 63)\r\n    };\r\n\r\n    function createStopMarker(stop) {\r\n        var stopMarker = new google.maps.Marker({\r\n            map: map.googleMap,\r\n            title: stop.name,\r\n            icon: image,\r\n            position: new google.maps.LatLng(stop.location.latitude, stop.location.longitude)\r\n        });\r\n\r\n        google.maps.event.addListener(stopMarker, 'click', function() {\r\n            mapStopClicked.broadcast(stop);\r\n        });\r\n    }\r\n\r\n    mapCenterChanged.listen(function() {\r\n        searchForStops();\r\n    });\r\n\r\n    searchForStops();\r\n});\n","define(\"geolocationTracker\", [\"map\"], function(map) {\r\n    var locationMarker;\r\n\r\n\tfunction createLocationMarker() {\r\n        return new google.maps.Marker({\r\n            clickable: false,\r\n            icon: new google.maps.MarkerImage('//maps.gstatic.com/mapfiles/mobile/mobileimgs2.png', new google.maps.Size(22, 22), new google.maps.Point(0, 18), new google.maps.Point(11, 11)),\r\n            shadow: null,\r\n            zIndex: 999,\r\n            map: map.googleMap\r\n        });\r\n    }\r\n\r\n    function trackLocation() {\r\n        navigator.geolocation.getCurrentPosition(function(pos) {\r\n            var me = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);\r\n            locationMarker.setPosition(me);\r\n        }, function(error) {\r\n            // No location\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n    \tlocationMarker = createLocationMarker();\r\n\t\tif (navigator.geolocation) trackLocation();\r\n    }\r\n\r\n    initialize();\r\n});\n","define(\"eventServices/addressEntered\", [],function() {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n\treturn {\r\n\t\tbroadcast: function(location) { callbacks.fire(location); },\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define(\"searchBar\", [\"map\", \"eventServices/addressEntered\"], function(map, addressEntered) {\r\n   \tvar geocoder = new google.maps.Geocoder();\r\n    \r\n    function initSearchBar() {\r\n        autocomplete = new google.maps.places.Autocomplete((document.getElementById('address')), { \r\n            types: ['geocode'] \r\n        });\r\n\r\n        google.maps.event.addListener(autocomplete, 'place_changed', function() {\r\n            onAddressEntered()\r\n            blurControls() \r\n        });\r\n\r\n        $(\"#address\").click(function() { $(\"#address\").select(); } );\r\n    }    \r\n\r\n    function getLocation(address) {\r\n        var promise = $.Deferred();\r\n        geocoder.geocode( { 'address': address}, function(results, status) {\r\n            if (status == google.maps.GeocoderStatus.OK) {\r\n                promise.resolve(results[0].geometry.location);\r\n            } else {\r\n                promise.reject();\r\n            }\r\n        });\r\n        return promise;\r\n    }    \r\n\r\n    function onAddressEntered() {\r\n      var address = document.getElementById('address').value;\r\n      getLocation(address).done(addressEntered.broadcast);\r\n    }\r\n\r\n    function blurControls() {\r\n        // Unfocus the text box to remove keyboard on Android\r\n        var activeElement = document.activeElement;\r\n        if (activeElement) {\r\n           activeElement.blur();\r\n        } else if (document.parentElement) {\r\n           document.parentElement.focus();\r\n        } else {\r\n           window.focus();\r\n        }\r\n    }\r\n\r\n    initSearchBar();\r\n});\r\n\n","define('mapPageScroller',[\"map\", \"eventServices/mapStopClicked\", \"eventServices/addressEntered\", \"eventServices/mapCenterChanged\"], \r\nfunction(map, mapStopClicked, addressEntered, mapCenterChanged) {\r\n\tfunction scrollTo(selector, completeCallback) {\r\n\t\tvar scrollPos = $(selector).offset().top;\r\n\t\t$('body,html').animate({ scrollTop: scrollPos}, 500, completeCallback);\r\n\t}\r\n\r\n\tmapStopClicked.listen(function(stop) {\r\n\t\tmap.panTo(new google.maps.LatLng(stop.location.latitude, stop.location.longitude));\r\n\t\tsetTimeout(function() {\r\n\t\t\tscrollTo(\"#nearby-stops-section\");\r\n\t\t}, 700);\r\n\t})\r\n\r\n\taddressEntered.listen(function(location) {\r\n\t\tscrollTo(\r\n\t\t\t\"#map-section\",\r\n\t\t\tfunction() {\r\n\t\t\t\tmap.addIdleListenerOnce(function(){\r\n\t\t\t\t    mapCenterChanged.broadcastNow();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tmap.panTo(location);\r\n\t\t\t});\r\n\t});\r\n\r\n\treturn {\r\n\t\tshowOnMap: function(lat, lng) {\r\n\t\t\tscrollTo(\r\n\t\t\t\t\"#map-section\",\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\tmap.panTo(new google.maps.LatLng(lat, lng));\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n});\n","define('angular/tahanotApp',[],function() {\r\n\tvar app = angular.module(\"tahanot\", []); \r\n\r\n    // For parsing query params with $location\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n        $locationProvider.html5Mode({\r\n          enabled: true,\r\n          requireBase: false\r\n        });\r\n    }]);\r\n\r\n\treturn {\r\n\t\tapp: app\r\n\t};\r\n});\n","define('nativeApp/bridge',[\"eventServices/newStopsDisplayed\"], function(newStopsDisplayed) {\r\n\tvar wasStopDisplayedSent = false\r\n\r\n\tfunction onStopsDisplayed() {\r\n\t\tif (wasStopDisplayedSent) return;\r\n\t\twasStopDisplayedSent = true;\r\n\t\t\r\n\t\tif (window.AndroidBridge) {\r\n        \twindow.AndroidBridge.onFirstStopDisplayed();\r\n        }\r\n        else {\r\n        \tconsole.log(\"Bridge: onFirstStopDisplayed\");\r\n        }\r\n    }\r\n\r\n    function onStopSelected(stopCode, stopName) {\r\n    \tif (window.AndroidBridge) {\r\n        \twindow.AndroidBridge.onStopSelected(stopCode, stopName);\r\n        }\r\n        else {\r\n        \tconsole.log(\"Bridge: onStopSelected: \" + name);\r\n        }\r\n    }\r\n\r\n    function requestStopMonitoring(stopCode) {\r\n        if (window.AndroidBridge) {\r\n            window.AndroidBridge.requestStopMonitoring(stopCode);\r\n        }\r\n        else {\r\n            console.log(\"Bridge: requestStopMonitoring\");\r\n            setTimeout(function() {\r\n                if (stopCode % 2 == 0) {\r\n                    var visit = function(line) { return {\"ExpectedArrivalTime\":\"\\/Date(1427919976000)\\/\",\"PublishedLineName\":\"\"+(line*100),\"DestinationRef\":\"21165\"} }\r\n                    onMonitoringInfoArrived([stopCode], {\"Stops\": [{\"MotiroringRef\":stopCode,\"StopVisits\": Array.apply(null, new Array(10)).map(function(_, x){return visit(x)}) }],\"ResponseTimestamp\":\"\\/Date(1427919007162)\\/\"});\r\n                }\r\n                else {\r\n                    onMonitoringInfoArrived([stopCode], {\"Stops\":[{\"MotiroringRef\":11111111111,\"StopVisits\":[{\"ExpectedArrivalTime\":\"\\/Date(1427919876000)\\/\",\"PublishedLineName\":\"66\",\"DestinationRef\":\"21165\"}]}],\"ResponseTimestamp\":\"\\/Date(1427919007162)\\/\"});\r\n                }\r\n            }, 2000);\r\n        }\r\n    }\r\n\r\n    newStopsDisplayed.listen(function() {\r\n        return onStopsDisplayed();\r\n    })\r\n\r\n\treturn {\r\n\t\tonStopSelected: onStopSelected,\r\n        // getStopCode: getStopCode,\r\n        // getStopName: getStopName,\r\n        requestStopMonitoring: requestStopMonitoring\r\n\t}\r\n});\n","define('nativeApp/nativeAppCallbacks/onMonitoringInfoArrived',[],function() {\r\n    var callbacks = $.Callbacks();\r\n\r\n    window.onMonitoringInfoArrived = function(stopCodes, monitoringInfo) {\r\n        visitsByStopCode = initVisitsMap(stopCodes);\r\n        addVisits(visitsByStopCode, monitoringInfo);\r\n        fireCallbacks(visitsByStopCode);\r\n    };\r\n\r\n    function initVisitsMap(stopCodes) {\r\n        visitsByStopCode = [];\r\n        stopCodes.forEach(function(stopCode) {\r\n            visitsByStopCode[stopCode] = [];\r\n        })\r\n        return visitsByStopCode;\r\n    }\r\n\r\n    function addVisits(visitsByStopCode, monitoringInfo) {\r\n        monitoringInfo.Stops.forEach(function(monitoringStop) {\r\n            var stopCode = monitoringStop.MotiroringRef;\r\n            var visits = [];\r\n\r\n            monitoringStop.StopVisits.forEach(function(visit) {\r\n                var minutesToArrival = minutesBetween(parseDate(monitoringInfo.ResponseTimestamp), parseDate(visit.ExpectedArrivalTime));\r\n                visits.push({\r\n                    lineNumber: visit.PublishedLineName,\r\n                    destinationRef: parseInt(visit.DestinationRef),\r\n                    minutesToArrival: minutesToArrival,\r\n                    isAlreadyHere: (minutesToArrival < 1)\r\n                });\r\n            });\r\n            visitsByStopCode[stopCode] = visits;            \r\n        });\r\n    }\r\n\r\n    function fireCallbacks(visitsByStopCode) {\r\n        for (var stopCode in visitsByStopCode) {\r\n            var visits = visitsByStopCode[stopCode];\r\n            callbacks.fire(parseInt(stopCode), visits);\r\n        };\r\n    }\r\n\r\n    function parseDate(msAjaxDate) {\r\n        return new Date(parseInt(msAjaxDate.replace(\"/Date(\", \"\").replace(\")/\",\"\"), 10));\r\n    }\r\n\r\n    function minutesBetween(olderDate, newerDate) {\r\n        return Math.floor((newerDate - olderDate) / 60000);\r\n    }\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","define('stopMonitoringCache',[\"nativeApp/bridge\", \"nativeApp/nativeAppCallbacks/onMonitoringInfoArrived\"], function(bridge, onMonitoringInfoArrived) {\r\n\r\n    const cacheTimeout = 30000;\r\n\r\n    function Stop(stopCode) {\r\n        var thisStop = this;\r\n        this.stopCode = stopCode;\r\n        this.ageOfData = undefined;\r\n        this.lastRequestSent = undefined;\r\n        this.visits = [];\r\n        this.deferreds = [];\r\n\r\n        this.updateVisits = function(visits) {\r\n            thisStop.visits = visits;\r\n            thisStop.ageOfData = new Date();\r\n            thisStop.deferreds.forEach(function(deferred)  {\r\n                deferred.resolve(visits);\r\n            });\r\n            thisStop.deferreds = [];\r\n        }\r\n\r\n        this.requestStopMonitoring = function(deferred) {\r\n            this.ageOfData = undefined;\r\n            bridge.requestStopMonitoring(stopCode);\r\n            thisStop.lastRequestSent = new Date();\r\n            thisStop.deferreds = [deferred];\r\n        }\r\n    }\r\n\r\n    function get(stopCode, force, giveUpAfter) {\r\n        var deferred = $.Deferred();\r\n\r\n        var stop = getOrAddStop(stopCode);\r\n\r\n        if (force) {\r\n            stop.requestStopMonitoring(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n        else if (isRecent(stop.ageOfData)) {\r\n            deferred.resolve(stop.visits);\r\n        }\r\n        else if (isRecent(stop.lastRequestSent)) {\r\n            stop.deferreds.push(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n        else {\r\n            stop.requestStopMonitoring(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    var stops = [];\r\n\r\n    function getOrAddStop(stopCode)\r\n    {\r\n        var stop = getStop(stopCode);\r\n        if (!stop) {\r\n            stop = new Stop(stopCode);\r\n            stops.push(stop);\r\n        }\r\n        return stop;\r\n    }\r\n\r\n    function getStop(stopCode) {\r\n        for (var i = 0; i < stops.length; i++) {\r\n            if (stops[i].stopCode === stopCode) {\r\n                return stops[i];\r\n            }\r\n        };        \r\n    }\r\n\r\n    function isRecent(time) {\r\n        return time && (time > new Date() - cacheTimeout);\r\n    }\r\n\r\n    function prepareToGiveUp(deferred) {\r\n        setTimeout(function() {\r\n            deferred.reject();\r\n        }, giveUpAfter);\r\n    }\r\n\r\n    onMonitoringInfoArrived.listen(function(stopCode, visits) {\r\n        var stop = getStop(stopCode);\r\n        if (!stop) return;\r\n        stop.updateVisits(visits);\r\n    })\r\n\r\n    return {\r\n        get: get\r\n    }\r\n});\n","define('nativeApp/nativeAppCallbacks/setIsForWidget',[],function() {\r\n    var callbacks = $.Callbacks();\r\n\r\n    window.setIsForWidget = function(isForWidget) {\r\n        callbacks.fire(isForWidget);\r\n    };\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","require([\"angular/tahanotApp\", \"map\", \"stopCache\", \"stopMonitoringCache\", \"nativeApp/bridge\", \"mapPageScroller\", \"eventServices/mapStopClicked\", \r\n\t\"eventServices/mapCenterChanged\", \"eventServices/newStopsDisplayed\", \"nativeApp/nativeAppCallbacks/setIsForWidget\"], \r\nfunction(tahanotApp, map, stopCache, stopMonitoringCache, bridge, mapPageScroller, mapStopClicked, mapCenterChanged, newStopsDisplayed, setIsForWidget) {\r\n\r\n\ttahanotApp.app.controller('nearbyStopsController', ['$scope', '$http', function($scope, $http) {\r\n\t    $scope.stops = [];\r\n\t    $scope.isForWidget = false;\r\n\t    var mapCenter;\r\n\t    var selectedStopCode;\r\n\r\n\t    $scope.selectForWidget = function(stopModel) { \r\n\t    \tbridge.onStopSelected(stopModel.code, stopModel.name);\r\n\t    };\r\n\r\n\t    $scope.showOnMap = function(stopModel) {\r\n\t    \tselectedStopCode = stopModel.code;\r\n\t    \tmapPageScroller.showOnMap(stopModel.lat, stopModel.lng);\r\n\t    }\r\n\r\n\t\t$scope.refreshVisits = function(stopModel) { \r\n\t\t\tgetVisits(stopModel, true);\r\n\t\t}\r\n\r\n\t    function refresh() {    \t\t\r\n    \t\t$scope.stops = [];\r\n        \tvar regularStops = stopCache.getStopsAround(map.getCenter().lat(), map.getCenter().lng(), 5);\r\n    \t\t\r\n    \t\tif (selectedStopCode) {\r\n        \t\tvar selectedStop = stopCache.get(selectedStopCode)\r\n        \t\taddStopModel(createStopModel(selectedStop, true));\r\n        \t}\r\n\r\n        \tregularStops.slice(0,8).forEach(function(stop) {\r\n\t    \t\tif (stop.code != selectedStopCode) {\r\n\t\t    \t\taddStopModel(createStopModel(stop, false));\r\n\t\t    \t}\r\n\t    \t});\r\n\t    }\r\n\r\n\t    function createStopModel(stop, isSelected) {\r\n\t    \tif (!stop.location) {\r\n\t    \t\tconsole.log(stop.code);\r\n\t    \t}\r\n\t\t\treturn {\r\n    \t\t\tstopCode: stop.code,\r\n    \t\t\tname: stop.name,\r\n    \t\t\tlat: stop.location.latitude,\r\n    \t\t\tlng: stop.location.longitude,\r\n    \t\t\tvisitsAvailable: false,\r\n    \t\t\tisSelected: isSelected\r\n    \t\t}\r\n\t    }\r\n\r\n\t    function addStopModel(stopModel) {\r\n\t    \t$scope.stops.push(stopModel);\r\n\t    \tgetVisits(stopModel);\r\n\t    }\r\n\r\n\t\tfunction getVisits(stopModel, force) {\r\n\t\t\tstopModel.visits = [];\r\n\t    \tstopModel.isReceivingVisits = true;\r\n\t    \tstopModel.failedReceivingVisits = false;\r\n    \t\tstopMonitoringCache.get(stopModel.stopCode, force, 30000).then(function(visits) {\r\n\t\t\t\tcallInScope(function() {\r\n\t    \t\t\tif ($scope.stops.indexOf(stopModel) === -1) return;\r\n\t    \t\t\tstopModel.visits = visits;\r\n\t    \t\t\tstopModel.isReceivingVisits = false;\r\n\t    \t\t\tvisits.forEach(function(visit) {\r\n\t    \t\t\t\tstopCache.getOrAdd(visit.destinationRef).then(function(destinationStop) {\r\n\t    \t\t\t\t\tcallInScope(function() {\r\n\t\t    \t\t\t\t\tvisit.destination = destinationStop.name + \", \" + destinationStop.town;\r\n\t\t    \t\t\t\t});\r\n\t    \t\t\t\t});\r\n\t\t    \t\t});\r\n\t    \t\t});\r\n\t\t\t},\r\n\t\t\tfunction() { // fail\r\n\t\t\t\t$scope.$apply(function() {\r\n\t\t\t\t\tstop.isReceivingVisits = false;\r\n\t\t\t\t\tstop.failedReceivingVisits = true;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t    function callInScope(f) { if (!$scope.$$phase) { $scope.$apply(f); } else { f(); } }\r\n\r\n\t\tmapCenterChanged.listen(function() { $scope.$apply(refresh); });\r\n\t    newStopsDisplayed.listen(function() { $scope.$apply(refresh); });\r\n\t    mapStopClicked.listen(function(stop) { selectedStopCode = stop.code; })\r\n\r\n\t    setIsForWidget.listen(function(isForWidget) { \r\n\t    \t$scope.$apply(function() { \r\n\t    \t\t$scope.isForWidget = isForWidget; \r\n\t    \t}); \r\n\t    })\r\n\t}]);\r\n\r\n\tangular.element(document).ready(function() {\r\n\t    angular.bootstrap(document, [\"tahanot\"]);\r\n\t    $(\"#nearby-stops-section\").show();\r\n\t});\t\r\n});\r\n\ndefine(\"angular/nearbyStopsController\", function(){});\n\n"]}