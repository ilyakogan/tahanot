{"version":3,"file":"mapAll.js","sources":["mapMain.js","utils/distance.js","eventServices/mapCenterChanged.js","eventServices/stopAdded.js","nativeApp/nativeAppCallbacks/setInitialLocation.js","map.js","parseClient.js","stopCache.js","eventServices/mapStopClicked.js","mapStops.js","geolocationTracker.js","eventServices/addressEntered.js","searchBar.js","mapPageScroller.js","angular/tahanotApp.js","nativeApp/bridge.js","nativeApp/nativeAppCallbacks/onMonitoringInfoArrived.js","stopMonitoringCache.js","nativeApp/nativeAppCallbacks/setIsForWidget.js","angular/nearbyStopsController.js"],"names":["visualTouches","$","document","ready","height","window","width","navBarHeight","outerHeight","css","click","scrollPos","jQuery","find","this","attr","offset","top","animate","scrollTop","scrollspy","target","define","location1","location2","x","lat","y","lng","Math","sqrt","map","distance","centerBefore","callbacks","Callbacks","activeTimerId","broadcastDelayed","getCenter","clearTimeout","setTimeout","dist","fire","broadcastNow","listen","callback","add","broadcast","stop","setInitialLocation","lon","mapCenterChanged","stopAdded","initialize","initialLocation","google","maps","LatLng","Map","getElementById","center","streetViewControl","panControl","zoomControlOptions","style","ZoomControlStyle","SMALL","position","ControlPosition","RIGHT_BOTTOM","mapTypeControlOptions","mapTypeIds","MapTypeId","ROADMAP","SATELLITE","zoom","registerMapEvents","navigator","geolocation","getCurrentPosition","pos","coords","initMapCenter","latitude","longitude","setCenter","event","addListener","addIdleListenerOnce","addListenerOnce","panTo","location","googleMap","extractStop","obj","code","get","name","town","getNearbyStops","point","Parse","GeoPoint","query","Query","Object","extend","near","limit","then","objs","getStopByCode","stopCode","equalTo","first","parseClient","exists","undefined","stops","byDistanceFrom","centerGeoPoint","stop1","stop2","distance1","kilometersTo","distance2","getStopsAround","centerLat","centerLng","maxDisatnceKm","nearbyStops","push","sort","addStopsAround","forEach","getOrAdd","d","Deferred","resolve","promise","stopCache","mapStopClicked","searchForStops","createStopMarker","stopMarker","Marker","title","icon","image","url","size","Size","origin","Point","anchor","createLocationMarker","clickable","MarkerImage","shadow","zIndex","trackLocation","me","locationMarker","setPosition","addressEntered","initSearchBar","autocomplete","places","Autocomplete","types","onAddressEntered","blurControls","select","getLocation","address","geocoder","geocode","results","status","GeocoderStatus","OK","geometry","reject","value","isNaN","done","parseInt","activeElement","blur","parentElement","focus","Geocoder","scrollTo","selector","completeCallback","showOnMap","app","angular","module","config","$locationProvider","html5Mode","enabled","requireBase","onStopsDisplayed","wasStopDisplayedSent","AndroidBridge","onFirstStopDisplayed","console","log","onStopSelected","stopName","requestStopMonitoring","visit","line","ExpectedArrivalTime","PublishedLineName","DestinationRef","onMonitoringInfoArrived","Stops","MotiroringRef","StopVisits","Array","apply","_","ResponseTimestamp","initVisitsMap","stopCodes","visitsByStopCode","addVisits","monitoringInfo","monitoringStop","visits","minutesToArrival","minutesBetween","parseDate","lineNumber","destinationRef","isAlreadyHere","fireCallbacks","msAjaxDate","Date","replace","olderDate","newerDate","floor","bridge","Stop","thisStop","ageOfData","lastRequestSent","deferreds","updateVisits","deferred","force","giveUpAfter","getOrAddStop","isRecent","getStop","i","length","time","cacheTimeout","setIsForWidget","isForWidget","require","tahanotApp","stopMonitoringCache","mapPageScroller","controller","$scope","refresh","regularStops","selectedStopCode","selectedStop","addStopModel","createStopModel","slice","isSelected","visitsAvailable","stopModel","getVisits","isReceivingVisits","failedReceivingVisits","callInScope","indexOf","destinationStop","destination","$apply","f","$$phase","selectForWidget","refreshVisits","element","bootstrap","show"],"mappings":"AAUA,QAAAA,iBAEAC,EAAAC,UAAAC,MAAA,WACAF,EAAA,gBAAAG,OAAAH,EAAAI,QAAAD,UAAAE,MAAA,QACAL,EAAA,kBAAAG,OAAAH,EAAAI,QAAAD,UAAAE,MAAA,OACA,IAAAC,GAAAN,EAAA,gBAAAO,aACAP,GAAA,iBAAAQ,IAAA,cAAAF,KAIAN,EAAA,iBAAAS,MAAA,WACA,GAAAC,GAAAC,OAAA,QAAAC,KAAAZ,EAAAa,MAAAC,KAAA,SAAAC,SAAAC,GAEA,OADAhB,GAAA,aAAAiB,SAAAC,UAAAR,GAAA,IAAA,eACA,IAGAV,EAAA,QAAAmB,WAAAC,OAAA,iBC1BAC,OAAA,oBAAA,WACA,MAAA,UAAAC,EAAAC,GAEA,GAAAC,GAAAF,EAAAG,MAAAF,EAAAE,MACAC,EAAAJ,EAAAK,MAAAJ,EAAAI,KACA,OAAAC,MAAAC,KAAAL,EAAAA,EAAAE,EAAAA,MCLAL,ODQA,kCAAA,MAAA,kBAAA,SAAAS,EAAAC,GCPA,GAEAC,GAFAC,EAAAjC,EAAAkC,YAGAC,EAAA,IAEA,QACAC,iBAAA,SAAAC,GACAF,GACAG,aAAAH,GAEAH,EAAAK,IACAF,EAAAI,WAAA,WACAJ,EAAA,IACA,IAAAK,GAAAT,EAAAC,EAAAK,IACAG,GAAA,MAIAP,EAAAQ,QACA,MAGAC,aAAA,WACAT,EAAAQ,QAGAE,OAAA,SAAAC,GAAAX,EAAAY,IAAAD,OAGAvB,OC9BA,6BAAA,WACA,GAAAY,GAAAjC,EAAAkC,WAEA,QACAY,UAAA,SAAAC,GAAAd,EAAAQ,KAAAM,IACAJ,OAAA,SAAAC,GAAAX,EAAAY,IAAAD,OAGAvB,OCRA,qDAAA,WACA,GAAAY,GAAAjC,EAAAkC,WAMA,OAJA9B,QAAA4C,mBAAA,SAAAvB,EAAAwB,GACAhB,EAAAQ,KAAAhB,EAAAwB,KAIAN,OAAA,SAAAC,GAAAX,EAAAY,IAAAD,OCRAvB,ODWA,OAAA,iCAAA,0BAAA,mDCVA,SAAA6B,EAAAC,EAAAH,GAKA,QAAAI,KACA,GAAA3B,GAAA,MACAE,EAAA,OACA0B,EAAA,GAAAC,QAAAC,KAAAC,OAAA/B,EAAAE,EACAG,GAAA,GAAAwB,QAAAC,KAAAE,IAAAxD,SAAAyD,eAAA,eACAC,OAAAN,EACAO,mBAAA,EACAC,YAAA,EACAC,oBACAC,MAAAT,OAAAC,KAAAS,iBAAAC,MACAC,SAAAZ,OAAAC,KAAAY,gBAAAC,cAEAC,uBACAC,YACAhB,OAAAC,KAAAgB,UAAAC,QACAlB,OAAAC,KAAAgB,UAAAE,YAGAC,KAAA,KAGAC,IAEAC,UAAAC,aACAD,UAAAC,YAAAC,mBAAA,SAAAC,GACAA,GAAAA,EAAAC,QACAC,EAAAF,EAAAC,OAAAE,SAAAH,EAAAC,OAAAG,aAKAnC,EAAAL,OAAAsC,GAGA,QAAAA,GAAAxD,EAAAE,GACAG,EAAAsD,UAAA,GAAA9B,QAAAC,KAAAC,OAAA/B,EAAAE,IACAuB,EAAAR,eAGA,QAAAL,KACA,MAAAP,GAAAO,YAGA,QAAAsC,KACArB,OAAAC,KAAA8B,MAAAC,YAAAxD,EAAA,OAAA,WACAoB,EAAAd,iBAAAC,KAIA,QAAAkD,GAAA3C,GACAU,OAAAC,KAAA8B,MAAAG,gBAAA1D,EAAA,OAAA,WACAc,MAtDA,GAAAd,EA4DA,OAFAsB,MAGAqC,MAAA,SAAAC,GAAA5D,EAAA2D,MAAAC,IACArD,UAAAA,EACAkD,oBAAAA,EACAI,UAAA7D,KCnEAT,OAAA,iBAAA,WACA,QAAAuE,GAAAC,GACA,OACAC,KAAAD,EAAAE,IAAA,QACAC,KAAAH,EAAAE,IAAA,QACAE,KAAAJ,EAAAE,IAAA,QACAL,SAAAG,EAAAE,IAAA,aAIA,OACAG,eAAA,SAAAzE,EAAAE,GACA,GAAAwE,GAAA,GAAAC,OAAAC,SAAA5E,EAAAE,GACA2E,EAAA,GAAAF,OAAAG,MAAAH,MAAAI,OAAAC,OAAA,QAGA,OAFAH,GAAAI,KAAA,WAAAP,GACAG,EAAAK,MAAA,IACAL,EAAA1F,OAAAgG,KAAA,SAAAC,GACA,MAAA7G,GAAA8B,IAAA+E,EAAAjB,MAIAkB,cAAA,SAAAC,GACA,GAAAT,GAAA,GAAAF,OAAAG,MAAAH,MAAAI,OAAAC,OAAA,QAEA,OADAH,GAAAU,QAAA,OAAAD,GACAT,EAAAW,QAAAL,KAAAhB,OAIAvE,OC5BA,aAAA,cAAA,2BAAA,SAAA6F,EAAA/D,GAGA,QAAAgE,GAAApE,GACA,MAAAqE,UAAAC,EAAAtE,EAAA+C,MAGA,QAAAwB,GAAAC,GACA,MAAA,UAAAC,EAAAC,GAGA,MAFAC,WAAAF,EAAA9B,SAAAiC,aAAAJ,GACAK,UAAAH,EAAA/B,SAAAiC,aAAAJ,GACAG,UAAAE,WAIA,QAAAC,GAAAC,EAAAC,EAAAC,GACA,GAAAT,GAAA,GAAAnB,OAAAC,SAAAyB,EAAAC,GACAE,IACA,KAAA,GAAAlB,KAAAM,GACAA,EAAAN,GAAArB,SAAAiC,aAAAJ,GAAAS,GACAC,EAAAC,KAAAb,EAAAN,GAIA,OADAkB,GAAAE,KAAAb,EAAAC,IACAU,EAGA,QAAAG,GAAAN,EAAAC,GACAb,EAAAhB,eAAA4B,EAAAC,GAAAnB,KAAA,SAAAqB,GACAA,EAAAI,QAAA,SAAAtF,GACAoE,EAAApE,KACAsE,EAAAtE,EAAA+C,MAAA/C,EACAI,EAAAL,UAAAC,QAMA,QAAAuF,GAAAvB,GACA,GAAAwB,GAAAvI,EAAAwI,WACAzF,EAAAsE,EAAAN,EAUA,OATAhE,GACAwF,EAAAE,QAAA1F,GAGAmE,EAAAJ,cAAAC,GAAAH,KAAA,SAAA7D,GACAsE,EAAAtE,EAAA+C,MAAA/C,EACAwF,EAAAE,QAAA1F,KAGAwF,EAAAG,UAjDA,GAAArB,KAoDA,QACAQ,eAAAA,EACAO,eAAAA,EACAE,SAAAA,EACAvC,IAAA,SAAAgB,GACA,MAAAM,GAAAN,OC1DA1F,OD+DA,kCAAA,WC9DA,GAAAY,GAAAjC,EAAAkC,WAEA,QACAY,UAAA,SAAAC,GAAAd,EAAAQ,KAAAM,IACAJ,OAAA,SAAAC,GAAAX,EAAAY,IAAAD,OAGAvB,OCRA,YAAA,MAAA,YAAA,iCAAA,+BAAA,0BAAA,kBACA,SAAAS,EAAA6G,EAAAzF,EAAA0F,EAAAzF,GAEA,QAAA0F,KACAF,EAAAP,eAAAtG,EAAAO,YAAAZ,MAAAK,EAAAO,YAAAV,OAUA,QAAAmH,GAAA/F,GACA,GAAAgG,GAAA,GAAAzF,QAAAC,KAAAyF,QACAlH,IAAAA,EAAA6D,UACAsD,MAAAlG,EAAAiD,KACAkD,KAAAC,EACAjF,SAAA,GAAAZ,QAAAC,KAAAC,OAAAT,EAAA2C,SAAAR,SAAAnC,EAAA2C,SAAAP,YAGA7B,QAAAC,KAAA8B,MAAAC,YAAAyD,EAAA,QAAA,WACAH,EAAA9F,UAAAC,KAhBA,GAAAoG,IACAC,IAAA,wBACAC,KAAA,GAAA/F,QAAAC,KAAA+F,KAAA,GAAA,IACAC,OAAA,GAAAjG,QAAAC,KAAAiG,MAAA,EAAA,GACAC,OAAA,GAAAnG,QAAAC,KAAAiG,MAAA,GAAA,IAgBAtG,GAAAP,OAAA,WACAkG,MAGA1F,EAAAR,OAAAmG,GAEAD,MCjCAxH,ODmCA,sBAAA,OAAA,SAAAS,GChCA,QAAA4H,KACA,MAAA,IAAApG,QAAAC,KAAAyF,QACAW,WAAA,EACAT,KAAA,GAAA5F,QAAAC,KAAAqG,YAAA,qDAAA,GAAAtG,QAAAC,KAAA+F,KAAA,GAAA,IAAA,GAAAhG,QAAAC,KAAAiG,MAAA,EAAA,IAAA,GAAAlG,QAAAC,KAAAiG,MAAA,GAAA,KACAK,OAAA,KACAC,OAAA,IACAhI,IAAAA,EAAA6D,YAIA,QAAAoE,KACAnF,UAAAC,YAAAC,mBAAA,SAAAC,GACA,GAAAiF,GAAA,GAAA1G,QAAAC,KAAAC,OAAAuB,EAAAC,OAAAE,SAAAH,EAAAC,OAAAG,UACA8E,GAAAC,YAAAF,IACA,cAKA,QAAA5G,KACA6G,EAAAP,IACA9E,UAAAC,aAAAkF,IAvBA,GAAAE,EA0BA7G,OC3BA/B,OD6BA,kCAAA,WC5BA,GAAAY,GAAAjC,EAAAkC,WAEA,QACAY,UAAA,SAAArB,EAAAE,GAAAM,EAAAQ,KAAAhB,EAAAE,IACAgB,OAAA,SAAAC,GAAAX,EAAAY,IAAAD,OAGAvB,OCRA,aAAA,MAAA,+BAAA,aAAA,SAAAS,EAAAqI,EAAAxB,GAGA,QAAAyB,KACAC,aAAA,GAAA/G,QAAAC,KAAA+G,OAAAC,aAAAtK,SAAAyD,eAAA,YACA8G,OAAA,aAGAlH,OAAAC,KAAA8B,MAAAC,YAAA+E,aAAA,gBAAA,WACAI,IACAC,MAGA1K,EAAA,YAAAS,MAAA,WAAAT,EAAA,YAAA2K,WAGA,QAAAC,GAAAC,GACA,GAAAnC,GAAA1I,EAAAwI,UAQA,OAPAsC,GAAAC,SAAAF,QAAAA,GAAA,SAAAG,EAAAC,GACAA,GAAA3H,OAAAC,KAAA2H,eAAAC,GACAzC,EAAAD,QAAAuC,EAAA,GAAAI,SAAA1F,UAEAgD,EAAA2C,WAGA3C,EAGA,QAAA+B,KACA,GAAAI,GAAA5K,SAAAyD,eAAA,WAAA4H,KACAC,OAAAV,GACAD,EAAAC,GAAAW,KAAA,SAAA9F,GACAyE,EAAArH,UAAA4C,EAAAjE,MAAAiE,EAAA/D,SAIAgH,EAAAL,SAAAmD,SAAAZ,IAAAjE,KAAA,SAAA7D,GACAoH,EAAArH,UAAAC,EAAA2C,SAAAR,SAAAnC,EAAA2C,SAAAP,aAKA,QAAAuF,KAEA,GAAAgB,GAAAzL,SAAAyL,aACAA,GACAA,EAAAC,OACA1L,SAAA2L,cACA3L,SAAA2L,cAAAC,QAEAzL,OAAAyL,QAjDA,GAAAf,GAAA,GAAAxH,QAAAC,KAAAuI,QAqDA1B,OCtDA/I,ODyDA,mBAAA,MAAA,+BAAA,+BAAA,kCCxDA,SAAAS,EAAA8G,EAAAuB,EAAAjH,GACA,QAAA6I,GAAAC,EAAAC,GACA,GAAAvL,GAAAV,EAAAgM,GAAAjL,SAAAC,GACAhB,GAAA,aAAAiB,SAAAC,UAAAR,GAAA,IAAAuL,GAsBA,MAnBArD,GAAAjG,OAAA,SAAAI,GACAjB,EAAA2D,MAAA,GAAAnC,QAAAC,KAAAC,OAAAT,EAAA2C,SAAAR,SAAAnC,EAAA2C,SAAAP,YACA5C,WAAA,WACAwJ,EAAA,0BACA,OAGA5B,EAAAxH,OAAA,SAAAlB,EAAAE,GACAoK,EACA,eACA,WACAjK,EAAAyD,oBAAA,WACArC,EAAAR,iBAGAZ,EAAA2D,MAAA,GAAAnC,QAAAC,KAAAC,OAAA/B,EAAAE,SAKAuK,UAAA,SAAAzK,EAAAE,GACAoK,EACA,eACA,WACAjK,EAAA2D,MAAA,GAAAnC,QAAAC,KAAAC,OAAA/B,EAAAE,UC/BAN,ODoCA,wBAAA,WCnCA,GAAA8K,GAAAC,QAAAC,OAAA,aAUA,OAPAF,GAAAG,QAAA,oBAAA,SAAAC,GACAA,EAAAC,WACAC,SAAA,EACAC,aAAA,QAKAP,IAAAA,KAGA9K,OCfA,oBAAA,2BAAA,SAAA8B,GAGA,QAAAwJ,KACAC,IACAA,GAAA,EAEAxM,OAAAyM,cACAzM,OAAAyM,cAAAC,uBAGAC,QAAAC,IAAA,iCAIA,QAAAC,GAAAlG,EAAAmG,GACA9M,OAAAyM,cACAzM,OAAAyM,cAAAI,eAAAlG,EAAAmG,GAGAH,QAAAC,IAAA,2BAAAhH,MAIA,QAAAmH,GAAApG,GACA3G,OAAAyM,cACAzM,OAAAyM,cAAAM,sBAAApG,IAGAgG,QAAAC,IAAA,iCACAzK,WAAA,WACA,GAAAwE,EAAA,GAAA,EAAA,CACA,GAAAqG,GAAA,SAAAC,GAAA,OAAAC,oBAAA,wBAAAC,kBAAA,GAAA,IAAAF,EAAAG,eAAA,SACAC,0BAAA1G,IAAA2G,QAAAC,cAAA5G,EAAA6G,WAAAC,MAAAC,MAAA,KAAA,GAAAD,OAAA,KAAA/L,IAAA,SAAAiM,EAAAvM,GAAA,MAAA4L,GAAA5L,OAAAwM,kBAAA,8BAGAP,0BAAA1G,IAAA2G,QAAAC,cAAA,YAAAC,aAAAN,oBAAA,wBAAAC,kBAAA,KAAAC,eAAA,YAAAQ,kBAAA,2BAEA,MArCA,GAAApB,IAAA,CA6CA,OAJAzJ,GAAAR,OAAA,WACA,MAAAgK,QAIAM,eAAAA,EAGAE,sBAAAA,KAGA9L,OCrDA,0DAAA,WASA,QAAA4M,GAAAC,GAKA,MAJAC,qBACAD,EAAA7F,QAAA,SAAAtB,GACAoH,iBAAApH,QAEAoH,iBAGA,QAAAC,GAAAD,EAAAE,GACAA,EAAAX,MAAArF,QAAA,SAAAiG,GACA,GAAAvH,GAAAuH,EAAAX,cACAY,IAEAD,GAAAV,WAAAvF,QAAA,SAAA+E,GACA,GAAAoB,GAAAC,EAAAC,EAAAL,EAAAL,mBAAAU,EAAAtB,EAAAE,qBACAiB,GAAArG,MACAyG,WAAAvB,EAAAG,kBACAqB,eAAAnD,SAAA2B,EAAAI,gBACAgB,iBAAAA,EACAK,cAAA,EAAAL,MAGAL,EAAApH,GAAAwH,IAIA,QAAAO,GAAAX,GACA,IAAA,GAAApH,KAAAoH,GAAA,CACA,GAAAI,GAAAJ,EAAApH,EACA9E,GAAAQ,KAAAgJ,SAAA1E,GAAAwH,IAIA,QAAAG,GAAAK,GACA,MAAA,IAAAC,MAAAvD,SAAAsD,EAAAE,QAAA,SAAA,IAAAA,QAAA,KAAA,IAAA,KAGA,QAAAR,GAAAS,EAAAC,GACA,MAAAvN,MAAAwN,OAAAD,EAAAD,GAAA,KA9CA,GAAAjN,GAAAjC,EAAAkC,WAiDA,OA/CA9B,QAAAqN,wBAAA,SAAAS,EAAAG,GACAF,iBAAAF,EAAAC,GACAE,EAAAD,iBAAAE,GACAS,EAAAX,oBA6CAxL,OAAA,SAAAC,GAAAX,EAAAY,IAAAD,OAGAvB,OCtDA,uBAAA,mBAAA,wDAAA,SAAAgO,EAAA5B,GAIA,QAAA6B,GAAAvI,GACA,GAAAwI,GAAA1O,IACAA,MAAAkG,SAAAA,EACAlG,KAAA2O,UAAApI,OACAvG,KAAA4O,gBAAArI,OACAvG,KAAA0N,UACA1N,KAAA6O,aAEA7O,KAAA8O,aAAA,SAAApB,GACAgB,EAAAhB,OAAAA,EACAgB,EAAAC,UAAA,GAAAR,MACAO,EAAAG,UAAArH,QAAA,SAAAuH,GACAA,EAAAnH,QAAA8F,KAEAgB,EAAAG,cAGA7O,KAAAsM,sBAAA,SAAAyC,GACA/O,KAAA2O,UAAApI,OACAiI,EAAAlC,sBAAApG,GACAwI,EAAAE,gBAAA,GAAAT,MACAO,EAAAG,WAAAE,IAIA,QAAA7J,GAAAgB,EAAA8I,EAAAC,GACA,GAAAF,GAAA5P,EAAAwI,WAEAzF,EAAAgN,EAAAhJ,EAkBA,OAhBA8I,IACA9M,EAAAoK,sBAAAyC,GACArN,WAAA,WAAAqN,EAAAvE,UAAAyE,IAEAE,EAAAjN,EAAAyM,WACAI,EAAAnH,QAAA1F,EAAAwL,QAEAyB,EAAAjN,EAAA0M,kBACA1M,EAAA2M,UAAAxH,KAAA0H,GACArN,WAAA,WAAAqN,EAAAvE,UAAAyE,KAGA/M,EAAAoK,sBAAAyC,GACArN,WAAA,WAAAqN,EAAAvE,UAAAyE,IAGAF,EAAAlH,UAKA,QAAAqH,GAAAhJ,GAEA,GAAAhE,GAAAkN,EAAAlJ,EAKA,OAJAhE,KACAA,EAAA,GAAAuM,GAAAvI,GACAM,EAAAa,KAAAnF,IAEAA,EAGA,QAAAkN,GAAAlJ,GACA,IAAA,GAAAmJ,GAAA,EAAAA,EAAA7I,EAAA8I,OAAAD,IACA,GAAA7I,EAAA6I,GAAAnJ,WAAAA,EACA,MAAAM,GAAA6I,GAKA,QAAAF,GAAAI,GACA,MAAAA,IAAAA,EAAA,GAAApB,MAAAqB,EAxEA,KAAAA,GAAA,GAmDA,IAAAhJ,KAoCA,OANAoG,GAAA9K,OAAA,SAAAoE,EAAAwH,GACA,GAAAxL,GAAAkN,EAAAlJ,EACAhE,IACAA,EAAA4M,aAAApB,MAIAxI,IAAAA,KC1FA1E,OD6FA,iDAAA,WC5FA,GAAAY,GAAAjC,EAAAkC,WAMA,OAJA9B,QAAAkQ,eAAA,SAAAC,GACAtO,EAAAQ,KAAA8N,KAIA5N,OAAA,SAAAC,GAAAX,EAAAY,IAAAD,OCRA4N,SDWA,qBAAA,MAAA,YAAA,sBAAA,mBAAA,kBAAA,+BCVA,iCAAA,0BAAA,+CACA,SAAAC,EAAA3O,EAAA6G,EAAA+H,EAAArB,EAAAsB,EAAA/H,EAAA1F,EAAAC,EAAAmN,GAEAG,EAAAtE,IAAAyE,WAAA,yBAAA,SAAA,QAAA,SAAAC,GAmBA,QAAAC,KACAD,EAAAxJ,QACA,IAAA0J,GAAApI,EAAAd,eAAA/F,EAAAO,YAAAZ,MAAAK,EAAAO,YAAAV,MAAA,EAEA,IAAAqP,EAAA,CACA,GAAAC,GAAAtI,EAAA5C,IAAAiL,EACAE,GAAAC,EAAAF,GAAA,IAGAF,EAAAK,MAAA,EAAA,GAAA/I,QAAA,SAAAtF,GACAA,EAAA+C,MAAAkL,GACAE,EAAAC,EAAApO,GAAA,MAKA,QAAAoO,GAAApO,EAAAsO,GAIA,MAHAtO,GAAA2C,UACAqH,QAAAC,IAAAjK,EAAA+C,OAGAiB,SAAAhE,EAAA+C,KACAE,KAAAjD,EAAAiD,KACAvE,IAAAsB,EAAA2C,SAAAR,SACAvD,IAAAoB,EAAA2C,SAAAP,UACAmM,iBAAA,EACAD,WAAAA,GAIA,QAAAH,GAAAK,GACAV,EAAAxJ,MAAAa,KAAAqJ,GACAC,EAAAD,GAGA,QAAAC,GAAAD,EAAA1B,GACA0B,EAAAhD,UACAgD,EAAAE,mBAAA,EACAF,EAAAG,uBAAA,EACAhB,EAAA3K,IAAAwL,EAAAxK,SAAA8I,EAAA,KAAAjJ,KAAA,SAAA2H,GACAoD,EAAA,WACA,KAAAd,EAAAxJ,MAAAuK,QAAAL,KACAA,EAAAhD,OAAAA,EACAgD,EAAAE,mBAAA,EACAlD,EAAAlG,QAAA,SAAA+E,GACAzE,EAAAL,SAAA8E,EAAAwB,gBAAAhI,KAAA,SAAAiL,GACAF,EAAA,WACAvE,EAAA0E,YAAAD,EAAA7L,KAAA,KAAA6L,EAAA5L,eAMA,WACA4K,EAAAkB,OAAA,WACAhP,KAAA0O,mBAAA,EACA1O,KAAA2O,uBAAA,MAKA,QAAAC,GAAAK,GAAAnB,EAAAoB,QAAAD,IAAAnB,EAAAkB,OAAAC,GA/EAnB,EAAAxJ,SACAwJ,EAAAN,aAAA,CACA,IACAS,EAEAH,GAAAqB,gBAAA,SAAAX,GACAlC,EAAApC,eAAAsE,EAAAzL,KAAAyL,EAAAvL,OAGA6K,EAAA3E,UAAA,SAAAqF,GACAP,EAAAO,EAAAzL,KACA6K,EAAAzE,UAAAqF,EAAA9P,IAAA8P,EAAA5P,MAGAkP,EAAAsB,cAAA,SAAAZ,GACAC,EAAAD,GAAA,IAkEArO,EAAAP,OAAA,WAAAkO,EAAAkB,OAAAjB,KAEAlI,EAAAjG,OAAA,SAAAI,GAAAiO,EAAAjO,EAAA+C,OAEAwK,EAAA3N,OAAA,SAAA4N,GACAM,EAAAkB,OAAA,WACAlB,EAAAN,YAAAA,SAKAnE,QAAAgG,QAAAnS,UAAAC,MAAA,WACAkM,QAAAiG,UAAApS,UAAA,YACAD,EAAA,yBAAAsS,WAIAjR,OAAA,gCAAA,cnBvGAmP,SAAA,aACAA,SAAA,uBACAA,SAAA,cACAA,SAAA,oBACAA,SAAA,kCACAA,SAAA,yDACAA,SAAA,oDACAA,SAAA,gDAsBApK,MAAAhD,WAAA,2CAAA,4CAEArD,gBAGAsB,OAAA,UAAA","sourcesContent":["require([\"mapStops\"]);\r\nrequire([\"geolocationTracker\"]);\r\nrequire([\"searchBar\"]);\r\nrequire([\"mapPageScroller\"]);\r\nrequire([\"angular/nearbyStopsController\"]);\r\nrequire([\"nativeApp/nativeAppCallbacks/onMonitoringInfoArrived\"])\r\nrequire([\"nativeApp/nativeAppCallbacks/setInitialLocation\"])\r\nrequire([\"nativeApp/nativeAppCallbacks/setIsForWidget\"])\r\n\r\n\r\nfunction visualTouches() {\r\n\t// Set sections heights so they're prepared for navigation\r\n\t$(document).ready(function(){\r\n\t\t$(\"#map-section\").height($(window).height()).width(\"100%\");\r\n\t\t$(\"#hello-section\").height($(window).height()).width(\"100%\");\r\n\t\tvar navBarHeight = $(\"#navbar-main\").outerHeight();\r\n\t\t$(\".page-section\").css(\"padding-top\", navBarHeight);\r\n\t});\r\n\r\n\t// Make scrolling smooth\r\n\t$('.pagination a').click(function (event) {\r\n\t\tvar scrollPos = jQuery('body').find($(this).attr('href')).offset().top;\r\n\t\t$('body,html').animate({ scrollTop: scrollPos}, 500, function () {});\r\n\t\treturn false;\r\n\t});\r\n\r\n\t$('body').scrollspy({ target: '#navbar-main' })\r\n}\r\n\r\nParse.initialize(\"Yyxpr1XarbQvtfHNYWKHUGlFdKDjWttPKLYgMXBe\", \"xscYP2yXXd0udn26sXIhaCCIEW28pN2Ux2th2IJS\");\r\n\r\nvisualTouches();\r\n\r\n\ndefine(\"mapMain\", function(){});\n\n","define(\"utils/distance\", [],function() {\r\n    return function(location1, location2)\r\n    {\r\n      var x = location1.lat() - location2.lat();\r\n      var y = location1.lng() - location2.lng();\r\n      return Math.sqrt(x*x + y*y);\r\n    }\r\n});\n","define('eventServices/mapCenterChanged',[\"map\", \"utils/distance\"], function(map, distance) {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n    var centerBefore;\r\n    var activeTimerId = null;\r\n\r\n    return {\r\n\t\tbroadcastDelayed: function(getCenter) {\r\n            if (activeTimerId) {\r\n                clearTimeout(activeTimerId);\r\n            }\r\n            centerBefore = getCenter();\r\n            activeTimerId = setTimeout(function() {\r\n                activeTimerId = null;\r\n                var dist = distance(centerBefore, getCenter());\r\n                if (dist > 0.001) {\r\n                    // Map is still moving\r\n                    return;\r\n                }\r\n                callbacks.fire();\r\n            }, 1000);\r\n        },\r\n\r\n        broadcastNow: function() {\r\n            callbacks.fire(); \r\n        },\r\n\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define('eventServices/stopAdded',[],function() {\r\n    var callbacks = $.Callbacks();\r\n\r\n    return {\r\n        broadcast: function(stop) { callbacks.fire(stop); },\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    };\r\n});\n","define('nativeApp/nativeAppCallbacks/setInitialLocation',[],function() {\r\n    var callbacks = $.Callbacks();\r\n    \r\n    window.setInitialLocation = function(lat, lon) {\r\n        callbacks.fire(lat, lon);\r\n    };\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","define('map',[\"eventServices/mapCenterChanged\", \"eventServices/stopAdded\", \"nativeApp/nativeAppCallbacks/setInitialLocation\"], \r\n    function(mapCenterChanged, stopAdded, setInitialLocation) {\r\n\r\n    var map;\r\n    var mapMover;\r\n\r\n    function initialize() {\r\n        var lat = 32.08;\r\n        var lng = 34.781;\r\n        var initialLocation = new google.maps.LatLng(lat, lng);\r\n        map = new google.maps.Map(document.getElementById('map-canvas'), {\r\n            center: initialLocation,\r\n            streetViewControl: false,\r\n            panControl: false,\r\n            zoomControlOptions: {\r\n                style: google.maps.ZoomControlStyle.SMALL,\r\n                position: google.maps.ControlPosition.RIGHT_BOTTOM\r\n            },\r\n            mapTypeControlOptions: {\r\n                mapTypeIds: [\r\n                    google.maps.MapTypeId.ROADMAP,\r\n                    google.maps.MapTypeId.SATELLITE\r\n                ]\r\n            },\r\n            zoom: 17\r\n        });\r\n\r\n        registerMapEvents();\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(function(pos) { \r\n                if (pos && pos.coords) {\r\n                    initMapCenter(pos.coords.latitude, pos.coords.longitude);\r\n                }\r\n            })\r\n        }\r\n\r\n        setInitialLocation.listen(initMapCenter)\r\n    }\r\n\r\n    function initMapCenter(lat, lng) {\r\n        map.setCenter(new google.maps.LatLng(lat, lng));\r\n        mapCenterChanged.broadcastNow();\r\n    }\r\n\r\n    function getCenter() {\r\n        return map.getCenter();\r\n    }\r\n\r\n    function registerMapEvents() {\r\n        google.maps.event.addListener(map, 'idle', function() {\r\n            mapCenterChanged.broadcastDelayed(getCenter);\r\n        });\r\n    }\r\n\r\n    function addIdleListenerOnce(callback) { \r\n        google.maps.event.addListenerOnce(map, 'idle', function() {\r\n            callback();\r\n        }); \r\n    }\r\n\r\n    initialize();\r\n\r\n    return {\r\n        panTo: function(location) { map.panTo(location); },\r\n        getCenter: getCenter,\r\n        addIdleListenerOnce: addIdleListenerOnce,\r\n        googleMap: map\r\n    };\r\n});\n","define('parseClient',[],function() {\r\n    function extractStop(obj) {\r\n        return {\r\n            code: obj.get(\"code\"),\r\n            name: obj.get(\"name\"),\r\n            town: obj.get(\"town\"),\r\n            location: obj.get(\"location\")\r\n        };\r\n    }\r\n\r\n    return {\r\n        getNearbyStops: function(lat, lng) {\r\n            var point = new Parse.GeoPoint(lat, lng);\r\n            var query = new Parse.Query(Parse.Object.extend(\"stop\"));\r\n            query.near(\"location\", point);\r\n            query.limit(10);\r\n            return query.find().then(function(objs) {\r\n                return $.map(objs, extractStop);\r\n            });\r\n        },\r\n\r\n        getStopByCode: function(stopCode) {\r\n            var query = new Parse.Query(Parse.Object.extend(\"stop\"));\r\n            query.equalTo(\"code\", stopCode);\r\n            return query.first().then(extractStop);\r\n        }\r\n    }\r\n});\n","define('stopCache',[\"parseClient\", \"eventServices/stopAdded\"], function(parseClient, stopAdded) {\r\n\tvar stops = {};\r\n    \t\t\r\n\tfunction exists(stop) {\r\n        return stops[stop.code] !== undefined;\r\n\t}\r\n\r\n    function byDistanceFrom(centerGeoPoint) {\r\n    \treturn function(stop1, stop2) {\r\n\t        distance1 = stop1.location.kilometersTo(centerGeoPoint);\r\n\t        distance2 = stop2.location.kilometersTo(centerGeoPoint);\r\n\t        return distance1 - distance2;\r\n\t    };\r\n    }\r\n\r\n    function getStopsAround(centerLat, centerLng, maxDisatnceKm) {\r\n        var centerGeoPoint = new Parse.GeoPoint(centerLat, centerLng);\r\n        var nearbyStops = []\r\n        for (var stopCode in stops) {\r\n            if (stops[stopCode].location.kilometersTo(centerGeoPoint) < maxDisatnceKm) {\r\n                nearbyStops.push(stops[stopCode])\r\n            }\r\n        }\r\n    \tnearbyStops.sort(byDistanceFrom(centerGeoPoint));\r\n        return nearbyStops;\r\n    }\r\n\r\n    function addStopsAround(centerLat, centerLng) {\r\n        parseClient.getNearbyStops(centerLat, centerLng).then(function(nearbyStops) {\r\n            nearbyStops.forEach(function(stop) {\r\n                if (!exists(stop)) {\r\n                    stops[stop.code] = stop;\r\n                    stopAdded.broadcast(stop);\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    function getOrAdd(stopCode) {\r\n        var d = $.Deferred();\r\n        var stop = stops[stopCode];\r\n        if (stop) {\r\n            d.resolve(stop);\r\n        }\r\n        else {\r\n            parseClient.getStopByCode(stopCode).then(function(stop) {\r\n                stops[stop.code] = stop;\r\n                d.resolve(stop);\r\n            })\r\n        }\r\n        return d.promise();\r\n    }\r\n\r\n\treturn {\r\n\t\tgetStopsAround: getStopsAround,\r\n        addStopsAround: addStopsAround,\r\n        getOrAdd: getOrAdd,\r\n        get: function(stopCode) {\r\n            return stops[stopCode];\r\n        }\r\n\t};\r\n});\r\n    \n","define(\"eventServices/mapStopClicked\", [],function() {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n\treturn {\r\n\t\tbroadcast: function(stop) { callbacks.fire(stop); },\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define('mapStops',[\"map\", \"stopCache\", \"eventServices/mapCenterChanged\", \"eventServices/mapStopClicked\", \"eventServices/stopAdded\", \"utils/distance\"], \r\nfunction(map, stopCache, mapCenterChanged, mapStopClicked, stopAdded, distance) {\r\n\r\n    function searchForStops() {\r\n        stopCache.addStopsAround(map.getCenter().lat(), map.getCenter().lng());\r\n    }\r\n\r\n    var image = {\r\n        url: 'images/bus_marker.png',\r\n        size: new google.maps.Size(33, 61),\r\n        origin: new google.maps.Point(0, 0),\r\n        anchor: new google.maps.Point(16, 63)\r\n    };\r\n\r\n    function createStopMarker(stop) {\r\n        var stopMarker = new google.maps.Marker({\r\n            map: map.googleMap,\r\n            title: stop.name,\r\n            icon: image,\r\n            position: new google.maps.LatLng(stop.location.latitude, stop.location.longitude)\r\n        });\r\n\r\n        google.maps.event.addListener(stopMarker, 'click', function() {\r\n            mapStopClicked.broadcast(stop);\r\n        });\r\n    }\r\n\r\n    mapCenterChanged.listen(function() {\r\n        searchForStops();\r\n    });\r\n\r\n    stopAdded.listen(createStopMarker);\r\n\r\n    searchForStops();\r\n});\n","define(\"geolocationTracker\", [\"map\"], function(map) {\r\n    var locationMarker;\r\n\r\n\tfunction createLocationMarker() {\r\n        return new google.maps.Marker({\r\n            clickable: false,\r\n            icon: new google.maps.MarkerImage('//maps.gstatic.com/mapfiles/mobile/mobileimgs2.png', new google.maps.Size(22, 22), new google.maps.Point(0, 18), new google.maps.Point(11, 11)),\r\n            shadow: null,\r\n            zIndex: 999,\r\n            map: map.googleMap\r\n        });\r\n    }\r\n\r\n    function trackLocation() {\r\n        navigator.geolocation.getCurrentPosition(function(pos) {\r\n            var me = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);\r\n            locationMarker.setPosition(me);\r\n        }, function(error) {\r\n            // No location\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n    \tlocationMarker = createLocationMarker();\r\n\t\tif (navigator.geolocation) trackLocation();\r\n    }\r\n\r\n    initialize();\r\n});\n","define(\"eventServices/addressEntered\", [],function() {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n\treturn {\r\n\t\tbroadcast: function(lat, lng) { callbacks.fire(lat, lng); },\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define('searchBar',[\"map\", \"eventServices/addressEntered\", \"stopCache\"], function(map, addressEntered, stopCache) {\r\n   \tvar geocoder = new google.maps.Geocoder();\r\n    \r\n    function initSearchBar() {\r\n        autocomplete = new google.maps.places.Autocomplete((document.getElementById('address')), { \r\n            types: ['geocode'] \r\n        });\r\n\r\n        google.maps.event.addListener(autocomplete, 'place_changed', function() {\r\n            onAddressEntered()\r\n            blurControls() \r\n        });\r\n\r\n        $(\"#address\").click(function() { $(\"#address\").select(); } );\r\n    }    \r\n\r\n    function getLocation(address) {\r\n        var promise = $.Deferred();\r\n        geocoder.geocode( { 'address': address}, function(results, status) {\r\n            if (status == google.maps.GeocoderStatus.OK) {\r\n                promise.resolve(results[0].geometry.location);\r\n            } else {\r\n                promise.reject();\r\n            }\r\n        });\r\n        return promise;\r\n    }    \r\n\r\n    function onAddressEntered() {\r\n        var address = document.getElementById('address').value;\r\n        if (isNaN(address)) {\r\n            getLocation(address).done(function(location) {\r\n                addressEntered.broadcast(location.lat(), location.lng());\r\n            });\r\n        } \r\n        else {\r\n            stopCache.getOrAdd(parseInt(address)).then(function(stop) {\r\n                addressEntered.broadcast(stop.location.latitude, stop.location.longitude);\r\n            });\r\n        }\r\n    }\r\n\r\n    function blurControls() {\r\n        // Unfocus the text box to remove keyboard on Android\r\n        var activeElement = document.activeElement;\r\n        if (activeElement) {\r\n           activeElement.blur();\r\n        } else if (document.parentElement) {\r\n           document.parentElement.focus();\r\n        } else {\r\n           window.focus();\r\n        }\r\n    }\r\n\r\n    initSearchBar();\r\n});\r\n\n","define('mapPageScroller',[\"map\", \"eventServices/mapStopClicked\", \"eventServices/addressEntered\", \"eventServices/mapCenterChanged\"], \r\nfunction(map, mapStopClicked, addressEntered, mapCenterChanged) {\r\n\tfunction scrollTo(selector, completeCallback) {\r\n\t\tvar scrollPos = $(selector).offset().top;\r\n\t\t$('body,html').animate({ scrollTop: scrollPos}, 500, completeCallback);\r\n\t}\r\n\r\n\tmapStopClicked.listen(function(stop) {\r\n\t\tmap.panTo(new google.maps.LatLng(stop.location.latitude, stop.location.longitude));\r\n\t\tsetTimeout(function() {\r\n\t\t\tscrollTo(\"#nearby-stops-section\");\r\n\t\t}, 700);\r\n\t})\r\n\r\n\taddressEntered.listen(function(lat, lng) {\r\n\t\tscrollTo(\r\n\t\t\t\"#map-section\",\r\n\t\t\tfunction() {\r\n\t\t\t\tmap.addIdleListenerOnce(function(){\r\n\t\t\t\t    mapCenterChanged.broadcastNow();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tmap.panTo(new google.maps.LatLng(lat, lng));\r\n\t\t\t});\r\n\t});\r\n\r\n\treturn {\r\n\t\tshowOnMap: function(lat, lng) {\r\n\t\t\tscrollTo(\r\n\t\t\t\t\"#map-section\",\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\tmap.panTo(new google.maps.LatLng(lat, lng));\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n});\n","define('angular/tahanotApp',[],function() {\r\n\tvar app = angular.module(\"tahanot\", []); \r\n\r\n    // For parsing query params with $location\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n        $locationProvider.html5Mode({\r\n          enabled: true,\r\n          requireBase: false\r\n        });\r\n    }]);\r\n\r\n\treturn {\r\n\t\tapp: app\r\n\t};\r\n});\n","define('nativeApp/bridge',[\"eventServices/stopAdded\"], function(stopAdded) {\r\n\tvar wasStopDisplayedSent = false\r\n\r\n\tfunction onStopsDisplayed() {\r\n\t\tif (wasStopDisplayedSent) return;\r\n\t\twasStopDisplayedSent = true;\r\n\t\t\r\n\t\tif (window.AndroidBridge) {\r\n        \twindow.AndroidBridge.onFirstStopDisplayed();\r\n        }\r\n        else {\r\n        \tconsole.log(\"Bridge: onFirstStopDisplayed\");\r\n        }\r\n    }\r\n\r\n    function onStopSelected(stopCode, stopName) {\r\n    \tif (window.AndroidBridge) {\r\n        \twindow.AndroidBridge.onStopSelected(stopCode, stopName);\r\n        }\r\n        else {\r\n        \tconsole.log(\"Bridge: onStopSelected: \" + name);\r\n        }\r\n    }\r\n\r\n    function requestStopMonitoring(stopCode) {\r\n        if (window.AndroidBridge) {\r\n            window.AndroidBridge.requestStopMonitoring(stopCode);\r\n        }\r\n        else {\r\n            console.log(\"Bridge: requestStopMonitoring\");\r\n            setTimeout(function() {\r\n                if (stopCode % 2 == 0) {\r\n                    var visit = function(line) { return {\"ExpectedArrivalTime\":\"\\/Date(1427919976000)\\/\",\"PublishedLineName\":\"\"+(line*100),\"DestinationRef\":\"21165\"} }\r\n                    onMonitoringInfoArrived([stopCode], {\"Stops\": [{\"MotiroringRef\":stopCode,\"StopVisits\": Array.apply(null, new Array(10)).map(function(_, x){return visit(x)}) }],\"ResponseTimestamp\":\"\\/Date(1427919007162)\\/\"});\r\n                }\r\n                else {\r\n                    onMonitoringInfoArrived([stopCode], {\"Stops\":[{\"MotiroringRef\":11111111111,\"StopVisits\":[{\"ExpectedArrivalTime\":\"\\/Date(1427919876000)\\/\",\"PublishedLineName\":\"66\",\"DestinationRef\":\"21165\"}]}],\"ResponseTimestamp\":\"\\/Date(1427919007162)\\/\"});\r\n                }\r\n            }, 2000);\r\n        }\r\n    }\r\n\r\n    stopAdded.listen(function() {\r\n        return onStopsDisplayed();\r\n    })\r\n\r\n\treturn {\r\n\t\tonStopSelected: onStopSelected,\r\n        // getStopCode: getStopCode,\r\n        // getStopName: getStopName,\r\n        requestStopMonitoring: requestStopMonitoring\r\n\t}\r\n});\n","define('nativeApp/nativeAppCallbacks/onMonitoringInfoArrived',[],function() {\r\n    var callbacks = $.Callbacks();\r\n\r\n    window.onMonitoringInfoArrived = function(stopCodes, monitoringInfo) {\r\n        visitsByStopCode = initVisitsMap(stopCodes);\r\n        addVisits(visitsByStopCode, monitoringInfo);\r\n        fireCallbacks(visitsByStopCode);\r\n    };\r\n\r\n    function initVisitsMap(stopCodes) {\r\n        visitsByStopCode = [];\r\n        stopCodes.forEach(function(stopCode) {\r\n            visitsByStopCode[stopCode] = [];\r\n        })\r\n        return visitsByStopCode;\r\n    }\r\n\r\n    function addVisits(visitsByStopCode, monitoringInfo) {\r\n        monitoringInfo.Stops.forEach(function(monitoringStop) {\r\n            var stopCode = monitoringStop.MotiroringRef;\r\n            var visits = [];\r\n\r\n            monitoringStop.StopVisits.forEach(function(visit) {\r\n                var minutesToArrival = minutesBetween(parseDate(monitoringInfo.ResponseTimestamp), parseDate(visit.ExpectedArrivalTime));\r\n                visits.push({\r\n                    lineNumber: visit.PublishedLineName,\r\n                    destinationRef: parseInt(visit.DestinationRef),\r\n                    minutesToArrival: minutesToArrival,\r\n                    isAlreadyHere: (minutesToArrival < 1)\r\n                });\r\n            });\r\n            visitsByStopCode[stopCode] = visits;            \r\n        });\r\n    }\r\n\r\n    function fireCallbacks(visitsByStopCode) {\r\n        for (var stopCode in visitsByStopCode) {\r\n            var visits = visitsByStopCode[stopCode];\r\n            callbacks.fire(parseInt(stopCode), visits);\r\n        };\r\n    }\r\n\r\n    function parseDate(msAjaxDate) {\r\n        return new Date(parseInt(msAjaxDate.replace(\"/Date(\", \"\").replace(\")/\",\"\"), 10));\r\n    }\r\n\r\n    function minutesBetween(olderDate, newerDate) {\r\n        return Math.floor((newerDate - olderDate) / 60000);\r\n    }\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","define('stopMonitoringCache',[\"nativeApp/bridge\", \"nativeApp/nativeAppCallbacks/onMonitoringInfoArrived\"], function(bridge, onMonitoringInfoArrived) {\r\n\r\n    const cacheTimeout = 30000;\r\n\r\n    function Stop(stopCode) {\r\n        var thisStop = this;\r\n        this.stopCode = stopCode;\r\n        this.ageOfData = undefined;\r\n        this.lastRequestSent = undefined;\r\n        this.visits = [];\r\n        this.deferreds = [];\r\n\r\n        this.updateVisits = function(visits) {\r\n            thisStop.visits = visits;\r\n            thisStop.ageOfData = new Date();\r\n            thisStop.deferreds.forEach(function(deferred)  {\r\n                deferred.resolve(visits);\r\n            });\r\n            thisStop.deferreds = [];\r\n        }\r\n\r\n        this.requestStopMonitoring = function(deferred) {\r\n            this.ageOfData = undefined;\r\n            bridge.requestStopMonitoring(stopCode);\r\n            thisStop.lastRequestSent = new Date();\r\n            thisStop.deferreds = [deferred];\r\n        }\r\n    }\r\n\r\n    function get(stopCode, force, giveUpAfter) {\r\n        var deferred = $.Deferred();\r\n\r\n        var stop = getOrAddStop(stopCode);\r\n\r\n        if (force) {\r\n            stop.requestStopMonitoring(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n        else if (isRecent(stop.ageOfData)) {\r\n            deferred.resolve(stop.visits);\r\n        }\r\n        else if (isRecent(stop.lastRequestSent)) {\r\n            stop.deferreds.push(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n        else {\r\n            stop.requestStopMonitoring(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    var stops = [];\r\n\r\n    function getOrAddStop(stopCode)\r\n    {\r\n        var stop = getStop(stopCode);\r\n        if (!stop) {\r\n            stop = new Stop(stopCode);\r\n            stops.push(stop);\r\n        }\r\n        return stop;\r\n    }\r\n\r\n    function getStop(stopCode) {\r\n        for (var i = 0; i < stops.length; i++) {\r\n            if (stops[i].stopCode === stopCode) {\r\n                return stops[i];\r\n            }\r\n        };        \r\n    }\r\n\r\n    function isRecent(time) {\r\n        return time && (time > new Date() - cacheTimeout);\r\n    }\r\n\r\n    function prepareToGiveUp(deferred) {\r\n        setTimeout(function() {\r\n            deferred.reject();\r\n        }, giveUpAfter);\r\n    }\r\n\r\n    onMonitoringInfoArrived.listen(function(stopCode, visits) {\r\n        var stop = getStop(stopCode);\r\n        if (!stop) return;\r\n        stop.updateVisits(visits);\r\n    })\r\n\r\n    return {\r\n        get: get\r\n    }\r\n});\n","define('nativeApp/nativeAppCallbacks/setIsForWidget',[],function() {\r\n    var callbacks = $.Callbacks();\r\n\r\n    window.setIsForWidget = function(isForWidget) {\r\n        callbacks.fire(isForWidget);\r\n    };\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","require([\"angular/tahanotApp\", \"map\", \"stopCache\", \"stopMonitoringCache\", \"nativeApp/bridge\", \"mapPageScroller\", \"eventServices/mapStopClicked\", \r\n\t\"eventServices/mapCenterChanged\", \"eventServices/stopAdded\", \"nativeApp/nativeAppCallbacks/setIsForWidget\"], \r\nfunction(tahanotApp, map, stopCache, stopMonitoringCache, bridge, mapPageScroller, mapStopClicked, mapCenterChanged, stopAdded, setIsForWidget) {\r\n\r\n\ttahanotApp.app.controller('nearbyStopsController', ['$scope', '$http', function($scope, $http) {\r\n\t    $scope.stops = [];\r\n\t    $scope.isForWidget = false;\r\n\t    var mapCenter;\r\n\t    var selectedStopCode;\r\n\r\n\t    $scope.selectForWidget = function(stopModel) { \r\n\t    \tbridge.onStopSelected(stopModel.code, stopModel.name);\r\n\t    };\r\n\r\n\t    $scope.showOnMap = function(stopModel) {\r\n\t    \tselectedStopCode = stopModel.code;\r\n\t    \tmapPageScroller.showOnMap(stopModel.lat, stopModel.lng);\r\n\t    }\r\n\r\n\t\t$scope.refreshVisits = function(stopModel) { \r\n\t\t\tgetVisits(stopModel, true);\r\n\t\t}\r\n\r\n\t    function refresh() {    \t\t\r\n    \t\t$scope.stops = [];\r\n        \tvar regularStops = stopCache.getStopsAround(map.getCenter().lat(), map.getCenter().lng(), 5);\r\n    \t\t\r\n    \t\tif (selectedStopCode) {\r\n        \t\tvar selectedStop = stopCache.get(selectedStopCode)\r\n        \t\taddStopModel(createStopModel(selectedStop, true));\r\n        \t}\r\n\r\n        \tregularStops.slice(0,8).forEach(function(stop) {\r\n\t    \t\tif (stop.code != selectedStopCode) {\r\n\t\t    \t\taddStopModel(createStopModel(stop, false));\r\n\t\t    \t}\r\n\t    \t});\r\n\t    }\r\n\r\n\t    function createStopModel(stop, isSelected) {\r\n\t    \tif (!stop.location) {\r\n\t    \t\tconsole.log(stop.code);\r\n\t    \t}\r\n\t\t\treturn {\r\n    \t\t\tstopCode: stop.code,\r\n    \t\t\tname: stop.name,\r\n    \t\t\tlat: stop.location.latitude,\r\n    \t\t\tlng: stop.location.longitude,\r\n    \t\t\tvisitsAvailable: false,\r\n    \t\t\tisSelected: isSelected\r\n    \t\t}\r\n\t    }\r\n\r\n\t    function addStopModel(stopModel) {\r\n\t    \t$scope.stops.push(stopModel);\r\n\t    \tgetVisits(stopModel);\r\n\t    }\r\n\r\n\t\tfunction getVisits(stopModel, force) {\r\n\t\t\tstopModel.visits = [];\r\n\t    \tstopModel.isReceivingVisits = true;\r\n\t    \tstopModel.failedReceivingVisits = false;\r\n    \t\tstopMonitoringCache.get(stopModel.stopCode, force, 30000).then(function(visits) {\r\n\t\t\t\tcallInScope(function() {\r\n\t    \t\t\tif ($scope.stops.indexOf(stopModel) === -1) return;\r\n\t    \t\t\tstopModel.visits = visits;\r\n\t    \t\t\tstopModel.isReceivingVisits = false;\r\n\t    \t\t\tvisits.forEach(function(visit) {\r\n\t    \t\t\t\tstopCache.getOrAdd(visit.destinationRef).then(function(destinationStop) {\r\n\t    \t\t\t\t\tcallInScope(function() {\r\n\t\t    \t\t\t\t\tvisit.destination = destinationStop.name + \", \" + destinationStop.town;\r\n\t\t    \t\t\t\t});\r\n\t    \t\t\t\t});\r\n\t\t    \t\t});\r\n\t    \t\t});\r\n\t\t\t},\r\n\t\t\tfunction() { // fail\r\n\t\t\t\t$scope.$apply(function() {\r\n\t\t\t\t\tstop.isReceivingVisits = false;\r\n\t\t\t\t\tstop.failedReceivingVisits = true;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t    function callInScope(f) { if (!$scope.$$phase) { $scope.$apply(f); } else { f(); } }\r\n\r\n\t\tmapCenterChanged.listen(function() { $scope.$apply(refresh); });\r\n\t    //stopAdded.listen(function() { $scope.$apply(refresh); });\r\n\t    mapStopClicked.listen(function(stop) { selectedStopCode = stop.code; })\r\n\r\n\t    setIsForWidget.listen(function(isForWidget) { \r\n\t    \t$scope.$apply(function() { \r\n\t    \t\t$scope.isForWidget = isForWidget; \r\n\t    \t}); \r\n\t    })\r\n\t}]);\r\n\r\n\tangular.element(document).ready(function() {\r\n\t    angular.bootstrap(document, [\"tahanot\"]);\r\n\t    $(\"#nearby-stops-section\").show();\r\n\t});\t\r\n});\r\n\ndefine(\"angular/nearbyStopsController\", function(){});\n\n"]}