{"version":3,"file":"mapAll.js","sources":["mapMain.js","utils/distance.js","eventServices/mapCenterChanged.js","eventServices/newStopsDisplayed.js","nativeApp/nativeAppCallbacks/setInitialLocation.js","map.js","stopsRepository.js","nativeApp/bridge.js","eventServices/mapStopClicked.js","mapStops.js","geolocationTracker.js","eventServices/addressEntered.js","searchBar.js","mapPageScroller.js","angular/tahanotApp.js","nativeApp/nativeAppCallbacks/onMonitoringInfoArrived.js","stopMonitoringCache.js","nativeApp/nativeAppCallbacks/setIsForWidget.js","angular/nearbyStopsController.js"],"names":["visualTouches","$","document","ready","height","window","width","navBarHeight","outerHeight","css","click","scrollPos","jQuery","find","this","attr","offset","top","animate","scrollTop","scrollspy","target","define","location1","location2","x","lat","y","lng","Math","sqrt","map","distance","centerBefore","callbacks","Callbacks","activeTimerId","broadcastDelayed","getCenter","clearTimeout","setTimeout","dist","fire","broadcastNow","listen","callback","add","broadcast","setInitialLocation","lon","mapCenterChanged","newStopsDisplayed","initialize","initialLocation","google","maps","LatLng","Map","getElementById","center","streetViewControl","panControl","zoomControlOptions","style","ZoomControlStyle","SMALL","position","ControlPosition","RIGHT_BOTTOM","mapTypeControlOptions","mapTypeIds","MapTypeId","ROADMAP","SATELLITE","zoom","registerMapEvents","navigator","geolocation","getCurrentPosition","pos","coords","initMapCenter","latitude","longitude","setCenter","event","addListener","addIdleListenerOnce","addListenerOnce","panTo","location","googleMap","place","places","push","placeIds","place_id","exists","indexOf","byDistanceFrom","place1","place2","distance1","geometry","distance2","getStopsAround","placesCopy","slice","sort","onStopsDisplayed","wasStopDisplayedSent","AndroidBridge","onFirstStopDisplayed","console","log","onStopSelected","k","D","name","getStopCode","round","getStopName","stopCode","requestStopMonitoring","visit","line","ExpectedArrivalTime","PublishedLineName","DestinationRef","onMonitoringInfoArrived","Stops","MotiroringRef","StopVisits","Array","apply","_","ResponseTimestamp","stopsRepository","bridge","mapStopClicked","searchForStops","request","types","rankBy","RankBy","DISTANCE","service","PlacesService","nearbySearch","onStopsFound","results","status","PlacesServiceStatus","OK","anyNewStops","i","length","createStopMarker","stopMarker","Marker","title","icon","image","url","size","Size","origin","Point","anchor","createLocationMarker","clickable","MarkerImage","shadow","zIndex","trackLocation","me","locationMarker","setPosition","addressEntered","initSearchBar","autocomplete","Autocomplete","onAddressEntered","blurControls","select","getLocation","address","promise","Deferred","geocoder","geocode","GeocoderStatus","resolve","reject","value","done","activeElement","blur","parentElement","focus","Geocoder","scrollTo","selector","completeCallback","showOnMap","app","angular","module","config","$locationProvider","html5Mode","enabled","requireBase","initVisitsMap","stopCodes","visitsByStopCode","forEach","addVisits","monitoringInfo","monitoringStop","visits","minutesToArrival","minutesBetween","parseDate","lineNumber","destination","parseInt","isAlreadyHere","fireCallbacks","msAjaxDate","Date","replace","olderDate","newerDate","floor","Stop","thisStop","ageOfData","undefined","lastRequestSent","deferreds","updateVisits","deferred","get","force","giveUpAfter","stop","getOrAddStop","isRecent","getStop","stops","time","cacheTimeout","setIsForWidget","isForWidget","require","tahanotApp","stopMonitoringCache","mapPageScroller","controller","$scope","refresh","stopsAroundCenter","selectedStopPlace","addStop","createStop","isSelected","visitsAvailable","getVisits","isReceivingVisits","failedReceivingVisits","callInScope","fail","$apply","f","$$phase","selectForWidget","refreshVisits","element","bootstrap","show"],"mappings":"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","sourcesContent":["require([\"mapStops\"]);\r\nrequire([\"geolocationTracker\"]);\r\nrequire([\"searchBar\"]);\r\nrequire([\"mapPageScroller\"]);\r\nrequire([\"angular/nearbyStopsController\"]);\r\nrequire([\"nativeApp/nativeAppCallbacks/onMonitoringInfoArrived\"])\r\nrequire([\"nativeApp/nativeAppCallbacks/setInitialLocation\"])\r\nrequire([\"nativeApp/nativeAppCallbacks/setIsForWidget\"])\r\n\r\n\r\nfunction visualTouches() {\r\n\t// Set sections heights so they're prepared for navigation\r\n\t$(document).ready(function(){\r\n\t\t$(\"#map-section\").height($(window).height()).width(\"100%\");\r\n\t\t$(\"#hello-section\").height($(window).height()).width(\"100%\");\r\n\t\tvar navBarHeight = $(\"#navbar-main\").outerHeight();\r\n\t\t$(\".page-section\").css(\"padding-top\", navBarHeight);\r\n\t});\r\n\r\n\t// Make scrolling smooth\r\n\t$('.pagination a').click(function (event) {\r\n\t\tvar scrollPos = jQuery('body').find($(this).attr('href')).offset().top;\r\n\t\t$('body,html').animate({ scrollTop: scrollPos}, 500, function () {});\r\n\t\treturn false;\r\n\t});\r\n\r\n\t$('body').scrollspy({ target: '#navbar-main' })\r\n}\r\n\r\nvisualTouches();\r\n\r\n\ndefine(\"mapMain\", function(){});\n\n","define(\"utils/distance\", [],function() {\r\n    return function(location1, location2)\r\n    {\r\n      var x = location1.lat() - location2.lat();\r\n      var y = location1.lng() - location2.lng();\r\n      return Math.sqrt(x*x + y*y);\r\n    }\r\n});\n","define('eventServices/mapCenterChanged',[\"map\", \"utils/distance\"], function(map, distance) {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n    var centerBefore;\r\n    var activeTimerId = null;\r\n\r\n    return {\r\n\t\tbroadcastDelayed: function(getCenter) {\r\n            if (activeTimerId) {\r\n                clearTimeout(activeTimerId);\r\n            }\r\n            centerBefore = getCenter();\r\n            activeTimerId = setTimeout(function() {\r\n                activeTimerId = null;\r\n                var dist = distance(centerBefore, getCenter());\r\n                if (dist > 0.001) {\r\n                    // Map is still moving\r\n                    return;\r\n                }\r\n                callbacks.fire();\r\n            }, 1000);\r\n        },\r\n\r\n        broadcastNow: function() {\r\n            callbacks.fire(); \r\n        },\r\n\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define(\"eventServices/newStopsDisplayed\", [],function() {\r\n    var callbacks = $.Callbacks();\r\n\r\n    return {\r\n        broadcast: function() { callbacks.fire(); },\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    };\r\n});\n","define('nativeApp/nativeAppCallbacks/setInitialLocation',[],function() {\r\n    var callbacks = $.Callbacks();\r\n    \r\n    window.setInitialLocation = function(lat, lon) {\r\n        callbacks.fire(lat, lon);\r\n    };\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","define('map',[\"eventServices/mapCenterChanged\", \"eventServices/newStopsDisplayed\", \"nativeApp/nativeAppCallbacks/setInitialLocation\"], \r\n    function(mapCenterChanged, newStopsDisplayed, setInitialLocation) {\r\n\r\n    var map;\r\n    var mapMover;\r\n\r\n    function initialize() {\r\n        var lat = 32.08;\r\n        var lng = 34.781;\r\n        var initialLocation = new google.maps.LatLng(lat, lng);\r\n        map = new google.maps.Map(document.getElementById('map-canvas'), {\r\n            center: initialLocation,\r\n            streetViewControl: false,\r\n            panControl: false,\r\n            zoomControlOptions: {\r\n                style: google.maps.ZoomControlStyle.SMALL,\r\n                position: google.maps.ControlPosition.RIGHT_BOTTOM\r\n            },\r\n            mapTypeControlOptions: {\r\n                mapTypeIds: [\r\n                    google.maps.MapTypeId.ROADMAP,\r\n                    google.maps.MapTypeId.SATELLITE\r\n                ]\r\n            },\r\n            zoom: 17\r\n        });\r\n\r\n        registerMapEvents();\r\n\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(function(pos) { \r\n                if (pos && pos.coords) {\r\n                    initMapCenter(pos.coords.latitude, pos.coords.longitude);\r\n                }\r\n            })\r\n        }\r\n\r\n        setInitialLocation.listen(initMapCenter)\r\n    }\r\n\r\n    function initMapCenter(lat, lng) {\r\n        map.setCenter(new google.maps.LatLng(lat, lng));\r\n        mapCenterChanged.broadcastNow();\r\n    }\r\n\r\n    function getCenter() {\r\n        return map.getCenter();\r\n    }\r\n\r\n    function registerMapEvents() {\r\n        google.maps.event.addListener(map, 'idle', function() {\r\n            mapCenterChanged.broadcastDelayed(getCenter);\r\n        });\r\n    }\r\n\r\n    function addIdleListenerOnce(callback) { \r\n        google.maps.event.addListenerOnce(map, 'idle', function() {\r\n            callback();\r\n        }); \r\n    }\r\n\r\n    initialize();\r\n\r\n    return {\r\n        panTo: function(location) { map.panTo(location); },\r\n        getCenter: getCenter,\r\n        addIdleListenerOnce: addIdleListenerOnce,\r\n        googleMap: map\r\n    };\r\n});\n","define(\"stopsRepository\", [\"utils/distance\"], function(distance) {\r\n\tvar places = [];\r\n    var placeIds = [];\r\n    \t\t\r\n\tfunction add(place) {\r\n\t\tplaces.push(place);\r\n\t\tplaceIds.push(place.place_id);\r\n\t}\r\n\r\n\tfunction exists(place) {\r\n\t\treturn (placeIds.indexOf(place.place_id) != -1)\r\n\t}\r\n\r\n    function byDistanceFrom(center) {\r\n    \treturn function(place1, place2) {\r\n\t        distance1 = distance(place1.geometry.location, center);\r\n\t        distance2 = distance(place2.geometry.location, center);\r\n\t        return distance1 - distance2;\r\n\t    };\r\n    }\r\n\r\n    function getStopsAround(center) {\r\n    \tvar placesCopy = places.slice()\r\n        placesCopy.sort(byDistanceFrom(center));\r\n        return placesCopy;\r\n    }\r\n\r\n\treturn {\r\n\t\tadd: add,\r\n\t\texists: exists,\r\n\t\tgetStopsAround: getStopsAround\r\n\t};\r\n});\r\n    \n","define('nativeApp/bridge',[\"eventServices/newStopsDisplayed\"], function(newStopsDisplayed) {\r\n\tvar wasStopDisplayedSent = false\r\n\r\n\tfunction onStopsDisplayed() {\r\n\t\tif (wasStopDisplayedSent) return;\r\n\t\twasStopDisplayedSent = true;\r\n\t\t\r\n\t\tif (window.AndroidBridge) {\r\n        \twindow.AndroidBridge.onFirstStopDisplayed();\r\n        }\r\n        else {\r\n        \tconsole.log(\"Bridge: onFirstStopDisplayed\");\r\n        }\r\n    }\r\n\r\n    function onStopSelected(place, source) {\r\n    \tif (window.AndroidBridge) {\r\n        \twindow.AndroidBridge.onStopSelected(place.geometry.location.k, place.geometry.location.D, place.name);\r\n        }\r\n        else {\r\n        \tconsole.log(\"Bridge: onStopSelected: \" + place.name);\r\n        }\r\n    }\r\n\r\n    function getStopCode(place) {\r\n        if (window.AndroidBridge) {\r\n            return window.AndroidBridge.getStopCode(place.geometry.location.k, place.geometry.location.D);\r\n        }\r\n        else {\r\n            console.log(\"Bridge: getStopCode\");\r\n            return Math.round(place.geometry.location.D % 1 * 1000000);\r\n        }\r\n    }\r\n\r\n    function getStopName(stopCode) {\r\n        if (window.AndroidBridge) {\r\n            return window.AndroidBridge.getStopName(stopCode);\r\n        }\r\n        else {\r\n            console.log(\"Bridge: getStopName\");\r\n            return \"ביר אלמכסור 6/קופת חולים כללית,ביר אל מכסור\";\r\n        }\r\n    }\r\n\r\n    function requestStopMonitoring(stopCode) {\r\n        if (window.AndroidBridge) {\r\n            window.AndroidBridge.requestStopMonitoring(stopCode);\r\n        }\r\n        else {\r\n            console.log(\"Bridge: requestStopMonitoring\");\r\n            setTimeout(function() {\r\n                if (stopCode % 2 == 0) {\r\n                    var visit = function(line) { return {\"ExpectedArrivalTime\":\"\\/Date(1427919976000)\\/\",\"PublishedLineName\":\"\"+(line*100),\"DestinationRef\":\"21165\"} }\r\n                    onMonitoringInfoArrived([stopCode], {\"Stops\": [{\"MotiroringRef\":stopCode,\"StopVisits\": Array.apply(null, new Array(10)).map(function(_, x){return visit(x)}) }],\"ResponseTimestamp\":\"\\/Date(1427919007162)\\/\"});\r\n                }\r\n                else {\r\n                    onMonitoringInfoArrived([stopCode], {\"Stops\":[{\"MotiroringRef\":11111111111,\"StopVisits\":[{\"ExpectedArrivalTime\":\"\\/Date(1427919876000)\\/\",\"PublishedLineName\":\"66\",\"DestinationRef\":\"21165\"}]}],\"ResponseTimestamp\":\"\\/Date(1427919007162)\\/\"});\r\n                }\r\n            }, 2000);\r\n        }\r\n    }\r\n\r\n    newStopsDisplayed.listen(function() {\r\n        return onStopsDisplayed();\r\n    })\r\n\r\n\treturn {\r\n\t\tonStopSelected: onStopSelected,\r\n        getStopCode: getStopCode,\r\n        getStopName: getStopName,\r\n        requestStopMonitoring: requestStopMonitoring\r\n\t}\r\n});\n","define(\"eventServices/mapStopClicked\", [],function() {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n\treturn {\r\n\t\tbroadcast: function(place) { callbacks.fire(place); },\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define('mapStops',[\"map\", \"stopsRepository\", \"nativeApp/bridge\", \"eventServices/mapCenterChanged\", \"eventServices/mapStopClicked\", \"eventServices/newStopsDisplayed\", \"utils/distance\"], \r\nfunction(map, stopsRepository, bridge, mapCenterChanged, mapStopClicked, newStopsDisplayed, distance) {\r\n\r\n    function searchForStops() {        \r\n        var request = {\r\n            location: map.getCenter(),\r\n            types: ['bus_station'],\r\n            rankBy: google.maps.places.RankBy.DISTANCE\r\n        }\r\n        var service = new google.maps.places.PlacesService(map.googleMap)\r\n        service.nearbySearch(request, onStopsFound);\r\n    }\r\n\r\n    function onStopsFound(results, status, pagination) {\r\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\r\n            var anyNewStops = false\r\n            for (var i = 0; i < results.length; i++) {\r\n                var place = results[i];\r\n                if (!stopsRepository.exists(place)) {\r\n                    place.stopCode = bridge.getStopCode(place);\r\n                    if (place.stopCode != 0) {\r\n                        stopsRepository.add(place);\r\n                        createStopMarker(place);\r\n                        anyNewStops = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (anyNewStops) newStopsDisplayed.broadcast();\r\n    }\r\n\r\n    var image = {\r\n        url: 'images/bus_marker.png',\r\n        size: new google.maps.Size(33, 61),\r\n        origin: new google.maps.Point(0, 0),\r\n        anchor: new google.maps.Point(16, 63)\r\n    };\r\n\r\n    function createStopMarker(place) {\r\n        var placeLoc = place.geometry.location;\r\n        var stopMarker = new google.maps.Marker({\r\n            map: map.googleMap,\r\n            title: place.name,\r\n            icon: image,\r\n            position: place.geometry.location\r\n        });\r\n\r\n        google.maps.event.addListener(stopMarker, 'click', function() {\r\n            mapStopClicked.broadcast(place);\r\n        });\r\n    }\r\n\r\n    mapCenterChanged.listen(function() {\r\n        searchForStops();\r\n    });\r\n\r\n    searchForStops();\r\n});\n","define(\"geolocationTracker\", [\"map\"], function(map) {\r\n    var locationMarker;\r\n\r\n\tfunction createLocationMarker() {\r\n        return new google.maps.Marker({\r\n            clickable: false,\r\n            icon: new google.maps.MarkerImage('//maps.gstatic.com/mapfiles/mobile/mobileimgs2.png', new google.maps.Size(22, 22), new google.maps.Point(0, 18), new google.maps.Point(11, 11)),\r\n            shadow: null,\r\n            zIndex: 999,\r\n            map: map.googleMap\r\n        });\r\n    }\r\n\r\n    function trackLocation() {\r\n        navigator.geolocation.getCurrentPosition(function(pos) {\r\n            var me = new google.maps.LatLng(pos.coords.latitude, pos.coords.longitude);\r\n            locationMarker.setPosition(me);\r\n        }, function(error) {\r\n            // No location\r\n        });\r\n    }\r\n\r\n    function initialize() {\r\n    \tlocationMarker = createLocationMarker();\r\n\t\tif (navigator.geolocation) trackLocation();\r\n    }\r\n\r\n    initialize();\r\n});\n","define(\"eventServices/addressEntered\", [],function() {\r\n\tvar callbacks = $.Callbacks();\r\n\r\n\treturn {\r\n\t\tbroadcast: function(location) { callbacks.fire(location); },\r\n\t    listen: function(callback) { callbacks.add(callback); }\r\n\t};\r\n});\n","define(\"searchBar\", [\"map\", \"eventServices/addressEntered\"], function(map, addressEntered) {\r\n   \tvar geocoder = new google.maps.Geocoder();\r\n    \r\n    function initSearchBar() {\r\n        autocomplete = new google.maps.places.Autocomplete((document.getElementById('address')), { \r\n            types: ['geocode'] \r\n        });\r\n\r\n        google.maps.event.addListener(autocomplete, 'place_changed', function() {\r\n            onAddressEntered()\r\n            blurControls() \r\n        });\r\n\r\n        $(\"#address\").click(function() { $(\"#address\").select(); } );\r\n    }    \r\n\r\n    function getLocation(address) {\r\n        var promise = $.Deferred();\r\n        geocoder.geocode( { 'address': address}, function(results, status) {\r\n            if (status == google.maps.GeocoderStatus.OK) {\r\n                promise.resolve(results[0].geometry.location);\r\n            } else {\r\n                promise.reject();\r\n            }\r\n        });\r\n        return promise;\r\n    }    \r\n\r\n    function onAddressEntered() {\r\n      var address = document.getElementById('address').value;\r\n      getLocation(address).done(addressEntered.broadcast);\r\n    }\r\n\r\n    function blurControls() {\r\n        // Unfocus the text box to remove keyboard on Android\r\n        var activeElement = document.activeElement;\r\n        if (activeElement) {\r\n           activeElement.blur();\r\n        } else if (document.parentElement) {\r\n           document.parentElement.focus();\r\n        } else {\r\n           window.focus();\r\n        }\r\n    }\r\n\r\n    initSearchBar();\r\n});\r\n\n","define('mapPageScroller',[\"map\", \"eventServices/mapStopClicked\", \"eventServices/addressEntered\", \"eventServices/mapCenterChanged\"], \r\nfunction(map, mapStopClicked, addressEntered, mapCenterChanged) {\r\n\tfunction scrollTo(selector, completeCallback) {\r\n\t\tvar scrollPos = $(selector).offset().top;\r\n\t\t$('body,html').animate({ scrollTop: scrollPos}, 500, completeCallback);\r\n\t}\r\n\r\n\tmapStopClicked.listen(function(place) {\r\n\t\tmap.panTo(place.geometry.location);\r\n\t\tsetTimeout(function() {\r\n\t\t\tscrollTo(\"#nearby-stops-section\");\r\n\t\t}, 700);\r\n\t})\r\n\r\n\taddressEntered.listen(function(location) {\r\n\t\tscrollTo(\r\n\t\t\t\"#map-section\",\r\n\t\t\tfunction() {\r\n\t\t\t\tmap.addIdleListenerOnce(function(){\r\n\t\t\t\t    mapCenterChanged.broadcastNow();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tmap.panTo(location);\r\n\t\t\t});\r\n\t});\r\n\r\n\treturn {\r\n\t\tshowOnMap: function(place) {\r\n\t\t\tscrollTo(\r\n\t\t\t\t\"#map-section\",\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\tmap.panTo(place.geometry.location);\r\n\t\t\t\t});\r\n\t\t}\r\n\t}\r\n});\n","define('angular/tahanotApp',[],function() {\r\n\tvar app = angular.module(\"tahanot\", []); \r\n\r\n    // For parsing query params with $location\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n        $locationProvider.html5Mode({\r\n          enabled: true,\r\n          requireBase: false\r\n        });\r\n    }]);\r\n\r\n\treturn {\r\n\t\tapp: app\r\n\t};\r\n});\n","define('nativeApp/nativeAppCallbacks/onMonitoringInfoArrived',[\"nativeApp/bridge\"], function(bridge) {\r\n    var callbacks = $.Callbacks();\r\n\r\n    window.onMonitoringInfoArrived = function(stopCodes, monitoringInfo) {\r\n        visitsByStopCode = initVisitsMap(stopCodes);\r\n        addVisits(visitsByStopCode, monitoringInfo);\r\n        fireCallbacks(visitsByStopCode);\r\n    };\r\n\r\n    function initVisitsMap(stopCodes) {\r\n        visitsByStopCode = [];\r\n        stopCodes.forEach(function(stopCode) {\r\n            visitsByStopCode[stopCode] = [];\r\n        })\r\n        return visitsByStopCode;\r\n    }\r\n\r\n    function addVisits(visitsByStopCode, monitoringInfo) {\r\n        monitoringInfo.Stops.forEach(function(monitoringStop) {\r\n            var stopCode = monitoringStop.MotiroringRef;\r\n            var visits = [];\r\n\r\n            monitoringStop.StopVisits.forEach(function(visit) {\r\n                var minutesToArrival = minutesBetween(parseDate(monitoringInfo.ResponseTimestamp), parseDate(visit.ExpectedArrivalTime));\r\n                visits.push({\r\n                    lineNumber: visit.PublishedLineName,\r\n                    destination: bridge.getStopName(parseInt(visit.DestinationRef)),\r\n                    minutesToArrival: minutesToArrival,\r\n                    isAlreadyHere: (minutesToArrival < 1)\r\n                });\r\n            });\r\n            visitsByStopCode[stopCode] = visits;            \r\n        });\r\n    }\r\n\r\n    function fireCallbacks(visitsByStopCode) {\r\n        for (var stopCode in visitsByStopCode) {\r\n            var visits = visitsByStopCode[stopCode];\r\n            callbacks.fire(parseInt(stopCode), visits);\r\n        };\r\n    }\r\n\r\n    function parseDate(msAjaxDate) {\r\n        return new Date(parseInt(msAjaxDate.replace(\"/Date(\", \"\").replace(\")/\",\"\"), 10));\r\n    }\r\n\r\n    function minutesBetween(olderDate, newerDate) {\r\n        return Math.floor((newerDate - olderDate) / 60000);\r\n    }\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","define('stopMonitoringCache',[\"nativeApp/bridge\", \"nativeApp/nativeAppCallbacks/onMonitoringInfoArrived\"], function(bridge, onMonitoringInfoArrived) {\r\n\r\n    const cacheTimeout = 30000;\r\n\r\n    function Stop(stopCode) {\r\n        var thisStop = this;\r\n        this.stopCode = stopCode;\r\n        this.ageOfData = undefined;\r\n        this.lastRequestSent = undefined;\r\n        this.visits = [];\r\n        this.deferreds = [];\r\n\r\n        this.updateVisits = function(visits) {\r\n            thisStop.visits = visits;\r\n            thisStop.ageOfData = new Date();\r\n            thisStop.deferreds.forEach(function(deferred)  {\r\n                deferred.resolve(visits);\r\n            });\r\n            thisStop.deferreds = [];\r\n        }\r\n\r\n        this.requestStopMonitoring = function(deferred) {\r\n            this.ageOfData = undefined;\r\n            bridge.requestStopMonitoring(stopCode);\r\n            thisStop.lastRequestSent = new Date();\r\n            thisStop.deferreds = [deferred];\r\n        }\r\n    }\r\n\r\n    function get(stopCode, force, giveUpAfter) {\r\n        var deferred = $.Deferred();\r\n\r\n        var stop = getOrAddStop(stopCode);\r\n\r\n        if (force) {\r\n            stop.requestStopMonitoring(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n        else if (isRecent(stop.ageOfData)) {\r\n            deferred.resolve(stop.visits);\r\n        }\r\n        else if (isRecent(stop.lastRequestSent)) {\r\n            stop.deferreds.push(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n        else {\r\n            stop.requestStopMonitoring(deferred);\r\n            setTimeout(function() { deferred.reject(); }, giveUpAfter);\r\n        }\r\n\r\n        return deferred.promise();\r\n    }\r\n\r\n    var stops = [];\r\n\r\n    function getOrAddStop(stopCode)\r\n    {\r\n        var stop = getStop(stopCode);\r\n        if (!stop) {\r\n            stop = new Stop(stopCode);\r\n            stops.push(stop);\r\n        }\r\n        return stop;\r\n    }\r\n\r\n    function getStop(stopCode) {\r\n        for (var i = 0; i < stops.length; i++) {\r\n            if (stops[i].stopCode === stopCode) {\r\n                return stops[i];\r\n            }\r\n        };        \r\n    }\r\n\r\n    function isRecent(time) {\r\n        return time && (time > new Date() - cacheTimeout);\r\n    }\r\n\r\n    function prepareToGiveUp(deferred) {\r\n        setTimeout(function() {\r\n            deferred.reject();\r\n        }, giveUpAfter);\r\n    }\r\n\r\n    onMonitoringInfoArrived.listen(function(stopCode, visits) {\r\n        var stop = getStop(stopCode);\r\n        if (!stop) return;\r\n        stop.updateVisits(visits);\r\n    })\r\n\r\n    return {\r\n        get: get\r\n    }\r\n});\n","define('nativeApp/nativeAppCallbacks/setIsForWidget',[],function() {\r\n    var callbacks = $.Callbacks();\r\n\r\n    window.setIsForWidget = function(isForWidget) {\r\n        callbacks.fire(isForWidget);\r\n    };\r\n\r\n    return {\r\n        listen: function(callback) { callbacks.add(callback); }\r\n    }\r\n});\n","require([\"angular/tahanotApp\", \"map\", \"stopsRepository\", \"stopMonitoringCache\", \"nativeApp/bridge\", \"mapPageScroller\", \"eventServices/mapStopClicked\", \r\n\t\"eventServices/mapCenterChanged\", \"eventServices/newStopsDisplayed\", \"nativeApp/nativeAppCallbacks/setIsForWidget\"], \r\nfunction(tahanotApp, map, stopsRepository, stopMonitoringCache, bridge, mapPageScroller, mapStopClicked, mapCenterChanged, newStopsDisplayed, setIsForWidget) {\r\n\r\n\ttahanotApp.app.controller('nearbyStopsController', ['$scope', '$http', function($scope, $http) {\r\n\t    $scope.stops = [];\r\n\t    $scope.isForWidget = false;\r\n\t    var mapCenter;\r\n\t    var selectedStopPlace;\r\n\r\n\t    $scope.selectForWidget = function(stop) { \r\n\t    \tbridge.onStopSelected(stop.place);\r\n\t    };\r\n\r\n\t    $scope.showOnMap = function(stop) {\r\n\t    \tselectedStopPlace = stop.place;\r\n\t    \tmapPageScroller.showOnMap(stop.place);\r\n\t    }\r\n\r\n\t\t$scope.refreshVisits = function(stop) { \r\n\t\t\tgetVisits(stop, true);\r\n\t\t}\r\n\r\n\t    function refresh() {\r\n    \t\tvar stopsAroundCenter = stopsRepository.getStopsAround(map.getCenter());\r\n        \t$scope.stops = [];\r\n        \tif (selectedStopPlace) {\r\n        \t\taddStop(createStop(selectedStopPlace, true));\r\n        \t}\r\n\t    \tstopsAroundCenter.slice(0,8).forEach(function(place) {\r\n\t    \t\tif (place != selectedStopPlace) {\r\n\t\t    \t\taddStop(createStop(place, false));\r\n\t\t    \t}\r\n\t    \t});\r\n\t    }\r\n\r\n\t    function createStop(place, isSelected) {\r\n\t\t\treturn {\r\n    \t\t\tstopCode: place.stopCode,\r\n    \t\t\tname: place.name,\r\n    \t\t\tplace: place,\r\n    \t\t\tvisitsAvailable: false,\r\n    \t\t\tisSelected: isSelected\r\n    \t\t}\r\n\t    }\r\n\r\n\t    function addStop(stop) {\r\n\t    \t$scope.stops.push(stop);\r\n\t    \tgetVisits(stop);\r\n\t    }\r\n\r\n\t\tfunction getVisits(stop, force) {\r\n\t\t\tstop.visits = [];\r\n\t    \tstop.isReceivingVisits = true;\r\n\t    \tstop.failedReceivingVisits = false;\r\n    \t\tvar promise = stopMonitoringCache.get(stop.stopCode, force, 30000);\r\n    \t\tpromise.done(function(visits) {\r\n\t\t\t\tcallInScope(function() {\r\n\t    \t\t\tif ($scope.stops.indexOf(stop) === -1) return;\r\n\t    \t\t\tstop.visits = visits;\r\n\t    \t\t\tstop.isReceivingVisits = false;\r\n\t    \t\t});\r\n\t\t\t});\r\n\t\t\tpromise.fail(function() {\r\n\t\t\t\t$scope.$apply(function() {\r\n\t\t\t\t\tstop.isReceivingVisits = false;\r\n\t\t\t\t\tstop.failedReceivingVisits = true;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t    function callInScope(f) { if (!$scope.$$phase) { $scope.$apply(f); } else { f(); } }\r\n\r\n\t\tmapCenterChanged.listen(function() { $scope.$apply(refresh); });\r\n\t    newStopsDisplayed.listen(function() { $scope.$apply(refresh); });\r\n\t    mapStopClicked.listen(function(place) { selectedStopPlace = place; })\r\n\r\n\t    setIsForWidget.listen(function(isForWidget) { \r\n\t    \t$scope.$apply(function() { \r\n\t    \t\t$scope.isForWidget = isForWidget; \r\n\t    \t}); \r\n\t    })\r\n\t}]);\r\n\r\n\tangular.element(document).ready(function() {\r\n\t    angular.bootstrap(document, [\"tahanot\"]);\r\n\t    $(\"#nearby-stops-section\").show();\r\n\t});\t\r\n});\r\n\ndefine(\"angular/nearbyStopsController\", function(){});\n\n"]}